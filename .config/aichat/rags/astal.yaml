embedding_model: gemini:text-embedding-004
chunk_size: 1500
chunk_overlap: 75
reranker_model: null
top_k: 5
batch_size: 100
next_file_id: 42
document_paths:
- https://github.com/Aylur/astal/tree/main/docs/**
files:
  0:
    hash: d9f62ed58e2b712c803c2b842262e43086e5df1526b785b9a1d97b6a4e419ad3
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/README.md
    documents:
    - page_content: |-
        # Astal Docs

        This directory contains the Astal documentation and Library references.
        Hosted at [aylur.github.io/astal](https://aylur.github.io/astal/) and [aylur.github.io/libastal](https://aylur.github.io/libastal/)

        ## Commands

        | Command           | Action                                      |
        | :---------------- | :------------------------------------------ |
        | `npm install`     | Installs dependencies                       |
        | `npm run dev`     | Starts local dev server at `localhost:5173` |
        | `npm run build`   | Build your production site to `./dist/`     |
        | `npm run preview` | Preview your build locally                  |

        ## Add your creation to the showcases page

        1. Add your image as a webp to `public/showcase`
        2. Add it to `showcases/showcases.ts`
            - `src` should be `/astal/showcase/your-name-optional-title.webp`
            - `url` should point to the source code of the showcased widget/setup
            - `author` should be your name/nickname

        ```
        .
        ├── public/showcase
        │   └── your-name-optional-title.webp   # 1. add image
        └── showcases/
            └── showcases.ts                    # 2. add information
        ```
      metadata: {}
  1:
    hash: 7dd6a50b2ef2ac2d2e24b9379516acaf938c45575d01d220716826c87f4eda74
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/getting-started/introduction.md
    documents:
    - page_content: |-
        # Introduction

        ## What is Astal?

        Astal (_meaning "desk"_) is a suite of libraries written in Vala and C.
        The core library [astal3](https://aylur.github.io/libastal/astal3) and
        [astal4](https://aylur.github.io/libastal/astal4)
        have some Gtk widgets that come packaged,
        the most important one being the [Window](https://aylur.github.io/libastal/astal3/class.Window.html) which is the main toplevel component using [gtk-layer-shell](https://github.com/wmww/gtk-layer-shell).
        This is what allows us to use Gtk as shell components on Wayland.
        The other component is [Application](https://aylur.github.io/libastal/astal3/class.Application.html)
        which provides a way to send messages from the cli to running Astal instances.
        The other part of the core library is [astal-io](https://aylur.github.io/libastal/astal-io)
        which contains some utility GLib shortcut for running external processes,
        reading, writing and monitoring files, timeout and interval functions.
      metadata: {}
    - page_content: |-
        ## Why Astal?

        What makes Astal convenient to use is not the core libraries, as they can easily be replaced
        by the standard library of any of your favorite language that has bindings to Gtk, it is the
        accompanying libraries (_formerly known as "services" in AGS_).

        Have you ever wanted to write a custom bar, custom notification popups
        or an applauncher, but gave up because writing a workspace widget,
        implementing the notification daemon or handling a search filter was too much of a hassle?

        Astal libraries have you [covered](../libraries/references#astal-libraries), you don't have to worry about these,
        you just define the layout, style with CSS hook up the state from libraries you want and that's it.
      metadata: {}
  2:
    hash: aafdfeb98952c3bde44a53f74a6db8c953b72f00420fc0381250cc81141526af
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/getting-started/supported-languages.md
    documents:
    - page_content: |-
        # Supported Languages

        There are currently two languages that have an additional
        Astal package: Lua and Gjs. Their purpose is to abstract away
        Gtk by implementing a state management and UI declaring solution.

        ## JavaScript

        The main intended usage of Astal is in TypeScript+JSX.
        It is recommended to use [AGS](/guide/typescript/first-widgets) to scaffold and run projects in TypeScript.
        However, if you are familiar with JavaScript's tooling
        ecosystem you can also setup an environment yourself.
        Only a minimal knowledge of JavaScript's syntax is needed to get started.

        :::info
        The runtime is [GJS](https://gitlab.gnome.org/GNOME/gjs) and **not** nodejs
        :::

        Examples:

        - [Simple Bar](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/simple-bar)
        ![simple-bar](https://github.com/user-attachments/assets/a306c864-56b7-44c4-8820-81f424f32b9b)

        - [Notification Popups](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/notifications)
        ![notification-popups](https://github.com/user-attachments/assets/0df0eddc-5c74-4af0-a694-48dc8ec6bb44)

        - [Applauncher](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/applauncher)
        ![launcher](https://github.com/user-attachments/assets/2695e3bb-dff4-478a-b392-279fe638bfd3)

        - [Media Player](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/media-player)
        ![media-player](https://github.com/user-attachments/assets/891e9706-74db-4505-bd83-c3628d7b4fd0)
      metadata: {}
    - page_content: |-
        ## Lua

        Lua is well-supported, but I would still recommend TypeScript, as Lua lacks a type system, which in turn limits editor support.

        Examples:

        - [Simple Bar](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/simple-bar)
        ![simple-bar](https://github.com/user-attachments/assets/a306c864-56b7-44c4-8820-81f424f32b9b)

        - [Notification Popups](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/notifications)
        ![notification-popups](https://github.com/user-attachments/assets/0df0eddc-5c74-4af0-a694-48dc8ec6bb44)

        - [Applauncher](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/applauncher)
        ![launcher](https://github.com/user-attachments/assets/2695e3bb-dff4-478a-b392-279fe638bfd3)

        - [Media Player](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/media-player)
        ![media-player](https://github.com/user-attachments/assets/891e9706-74db-4505-bd83-c3628d7b4fd0)

        ## Python

        There is a WIP [package for python](https://github.com/aylur/astal/tree/feat/python),
        to bring declaritivity to Python similar to the above two languages.
        However, you can still use python the OOP way [pygobject](https://pygobject.gnome.org/tutorials/gobject/subclassing.html) intended it in the meantime.

        Examples:

        - [Simple Bar](https://github.com/Aylur/astal/tree/main/examples/gtk3/py/simple-bar)
        ![simple-bar](https://github.com/user-attachments/assets/a306c864-56b7-44c4-8820-81f424f32b9b)
      metadata: {}
    - page_content: |-
        ## Vala

        Vala is a language that simply put uses C# syntax and compiles to C.
        It is the language most of Astal is written in. I would still recommend
        using TypeScript or Lua over Vala as they are simpler to work with.

        Examples:

        - [Simple Bar](https://github.com/Aylur/astal/tree/main/examples/gtk3/vala/simple-bar)
        ![simple-bar](https://github.com/user-attachments/assets/a306c864-56b7-44c4-8820-81f424f32b9b)

        ## C

        I don't recommend using C as it requires quite a lot of boilerplate, both for
        build step and code.

        Examples:

        - TODO

        ## Other languages

        There a few more that supports gobject-introspection, most notably Haskell, Rust and C++.
        If you are interested and feel like contributing, PRs are welcome for bindings, and examples.
      metadata: {}
  3:
    hash: 5e1f69373caa4afc951eba61026eee956aa253f48fee40eb40a6cc1556d3d843
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/getting-started/nix.md
    documents:
    - page_content: |-
        ---
        next:
          link: '/guide/getting-started/supported-languages'
          text: 'Supported Languages'
        ---
        # Nix

        Using Astal on Nix will require you to write a derivation for your project.
        You can either copy and build off of these example flakes or you can
        incorporate the derivations into your existing flake/configuration.

        ## Installing libraries versus installing executables

        In case you did not know already,
        you can't install libraries globally on Nix as you would with regular
        package managers like `pacman`, `dnf` or `apt`. You have to write a
        derivation for your projects like you would for any other program.
        If you try to install a library through `home.packages` or `environment.systemPackages`
        don't expect it to be picked up from runtimes.

        However, if you want to use the CLI tool that comes with some of the libraries
        you have to **also** install them through `home.packages` or `environment.systemPackages`
        alongside your derivations.

        ### Astal CLI

        The core library also comes with a CLI tool that you can use to send
        requests to your app.

        :::code-group

        ```nix [nixos]
        environment.systemPackages = [inputs.astal.packages.${system}.default];
        ```

        ```nix [home-manager]
        home.packages = [inputs.astal.packages.${system}.default];
        ```

        :::

        ```sh [astal cli]
        astal --list # list running instances
        ```
      metadata: {}
    - page_content: |-
        ## TypeScript

        Using [AGS](https://aylur.github.io/ags/) as the bundler.

        :::code-group

        ```nix [<i class="devicon-nixos-plain"></i> flake.nix]
        {
          inputs = {
            nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
            astal = {
              url = "github:aylur/astal";
              inputs.nixpkgs.follows = "nixpkgs";
            };
            ags = {
              url = "github:aylur/ags";
              inputs.nixpkgs.follows = "nixpkgs";
            };
          };

          outputs = { self, nixpkgs, astal, ags }: let
            system = "x86_64-linux";
            pkgs = nixpkgs.legacyPackages.${system};
          in {
            packages.${system}. default = pkgs.stdenvNoCC.mkDerivation rec {
              name = "my-shell";
              src = ./.;

              nativeBuildInputs = [
                ags.packages.${system}.default
                pkgs.wrapGAppsHook
                pkgs.gobject-introspection
              ];

              buildInputs = with astal.packages.${system}; [
                astal3
                io
                # any other package
              ];

              installPhase = ''
                mkdir -p $out/bin
                ags bundle app.ts $out/bin/${name}
              '';
            };
          };
        }
        ```

        :::

        :::tip
        You can use any other bundler too like `esbuild`
        which is what `ags` uses under the hood.
        :::
      metadata: {}
    - page_content: |-
        ## Lua

        :::code-group

        ```nix [<i class="devicon-nixos-plain"></i> flake.nix]
        {
          inputs = {
            nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
            astal = {
              url = "github:aylur/astal";
              inputs.nixpkgs.follows = "nixpkgs";
            };
          };

          outputs = { self, nixpkgs, astal }: let
            system = "x86_64-linux";
            pkgs = nixpkgs.legacyPackages.${system};
          in {
            packages.${system}.default = astal.lib.mkLuaPackage {
              inherit pkgs;
              name = "my-shell"; # how to name the executable
              src = ./path/to/project; # should contain init.lua

              # add extra glib packages or binaries
              extraPackages = [
                astal.packages.${system}.battery
                pkgs.dart-sass
              ];
            };
          };
        }
        ```

        :::

        ## Python

        :::code-group

        ```nix [<i class="devicon-nixos-plain"></i> flake.nix]
        # Not documented yet
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Vala

        Keep in mind that this is just the nix derivation
        and you still have to use some build tool like meson.

        :::code-group

        ```nix [<i class="devicon-nixos-plain"></i> flake.nix]
        {
          inputs = {
            nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
            astal = {
              url = "github:aylur/astal";
              inputs.nixpkgs.follows = "nixpkgs";
            };
          };

          outputs = { self, nixpkgs, astal }: let
            system = "x86_64-linux";
            pkgs = nixpkgs.legacyPackages.${system};
          in {
            packages.${system}.default = pkgs.stdenv.mkDerivation {
              name = "my-shell";
              src = ./.;

              nativeBuildInputs = with pkgs; [
                meson
                ninja
                pkg-config
                vala
                gobject-introspection
              ];

              buildInputs = [
                astal.packages.${system}.io
                astal.packages.${system}.astal3
                astal.packages.${system}.battery
                # add extra packages
              ];
            };
          };
        }
        ```

        :::
      metadata: {}
  4:
    hash: 5423cf77489fd6d7f43e8d2137ad67ed7f5915e09e5b6d0246bd6ea5fb089813
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/getting-started/installation.md
    documents:
    - page_content: |-
        # Installation

        ## Arch

        maintainer: [@kotontrion](https://github.com/kotontrion)

        :::code-group

        ```sh [Core Library]
        yay -S libastal-io-git libastal-git
        ```

        ```sh [Every Library]
        yay -S libastal-meta
        ```

        :::

        ## Nix

        maintainer: [@Aylur](https://github.com/Aylur)

        Read more about it on the [nix page](./nix#astal)

        ## Building From Source

        1. Install the following dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc gtk3 gtk-layer-shell gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc gtk3-devel gtk-layer-shell-devel gobject-introspection-devel wayland-protocols-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libgtk-3-dev libgtk-layer-shell-dev gobject-introspection libgirepository1.0-dev
        ```

        :::

        2. Clone the repo

        ```sh
        git clone https://github.com/aylur/astal.git /tmp/astal
        ```

        3. Build and install with `meson`

        - astal-io

        ```sh
        cd /tmp/astal/lib/astal/io
        meson setup --prefix /usr build
        meson install -C build
        ```

        - astal3

        ```sh
        cd /tmp/astal/lib/astal/gtk3
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  5:
    hash: 133ddb6d55d107bbd9eeab20af758447b92366b218be91dc5722ab26ab42cb30
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/auth.md
    documents:
    - page_content: |-
        # Auth

        Library and CLI tool for authentication using [pam](https://github.com/linux-pam/linux-pam).

        ## Usage

        You can browse the [Auth reference](https://aylur.github.io/libastal/auth).

        ### CLI

        ```sh
        astal-auth --password my-password
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Auth from "gi://AstalAuth"

        Auth.Pam.authenticate("password", (_, task) => {
            try {
                AstalAuth.Pam.authenticate_finish(task)
                print("authentication sucessful")
            } catch (error) {
                print(error)
            }
        })
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalAuth as Auth

        def callback(_, task) -> None:
            try:
                Auth.Pam.authenticate_finish(task)
                print("success")
            except Exception as e:
                print(e)

        Auth.Pam.authenticate("password", callback)
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Auth = require("lgi").require("AstalAuth")

        Auth.Pam.authenticate("password", function(_, task)
            local status, err = Auth.Pam.authenticate_finish(task)
            if err ~= nil then
                print(err)
            else
                print("success")
            end
        end)
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson pam gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson pam-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        # Not yet documented
        ```

        :::

        ::: warning On NixOS you have to add `astal-auth` to `security.pam`.
        ::: code-group

        ```nix [configuration.nix]
        {
          security.pam.services.astal-auth = {}
        }
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/auth
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  6:
    hash: 6c89bf3d379452c88579e3d75fa3a67b217eaf38ac62f99eab9d63a0aba98407
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/battery.md
    documents:
    - page_content: |-
        # Battery

        Library and CLI tool for monitoring [upowerd](https://upower.freedesktop.org/) devices.

        ## Usage

        You can browse the [Battery reference](https://aylur.github.io/libastal/battery).

        ### CLI

        ```sh
        astal-battery --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Battery from "gi://AstalBattery"

        const battery = Battery.get_default()

        print(battery.percentage)
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalBattery as Battery

        battery = Battery.get_default()

        print(battery.get_percentage())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Battery = require("lgi").require("AstalBattery")

        local battery = Battery.get_default()

        print(battery.percentage)
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libjson-glib-dev gobject-introspection
        ```

        :::

        ::: info
        Although UPower is not a direct build dependency,
        it should be self-explanatory that the daemon is required to be available at runtime.
        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/battery
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  7:
    hash: fbbe31cc4118be44b9b250e628eb4af98a67f160f02c56fa577503799fe5f11e
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/cava.md
    documents:
    - page_content: |-
        # Cava

        Audio visualizer using [cava](https://github.com/karlstav/cava).

        ## Usage

        You can browse the [Cava reference](https://aylur.github.io/libastal/cava).

        ### CLI

        There is no CLI for this library, use the one provided by cava.

        ```sh
        cava
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Cava from "gi://AstalCava"

        const cava = Cava.get_default()

        cava.connect("notify::values", () => {
            print(cava.get_values())
        })
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        # Not yet documented
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        -- Not yet documented
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        Note that it requires [libcava](https://github.com/LukashonakV/cava), a fork of cava, which provides cava as a shared library.

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala gobject-introspection
        paru -S libcava
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        # Not yet documented
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        # Not yet documented
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/cava
        ```

        3. install

        ```sh
        meson setup build
        meson install -C build
        ```

        :::tip
        Most distros recommend manual installs in `/usr/local`,
        which is what `meson` defaults to. If you want to install to `/usr`
        instead which most package managers do, set the `prefix` option:

        ```sh
        meson setup --prefix /usr build
        ```

        :::
      metadata: {}
  8:
    hash: 5b056cba0bac91a9575ab042a979097aac4915a09b01f4a883ae3bbec7b5b75e
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/bluetooth.md
    documents:
    - page_content: |-
        # Bluetooth

        Library for monitoring [bluez](https://www.bluez.org/) over dbus.

        ## Usage

        You can browse the [Bluetooth reference](https://aylur.github.io/libastal/bluetooth).

        ### CLI

        There is no CLI for this library, use the one provided by bluez.

        ```sh
        bluetoothctl --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Bluetooth from "gi://AstalBluetooth"

        const bluetooth = Bluetooth.get_default()

        for (const device of bluetooth.get_devices()) {
            print(device.name)
        }
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalBluetooth as Bluetooth

        bluetooth = Bluetooth.get_default()

        for device in bluetooth.get_devices():
            print(device.get_name())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Bluetooth = require("lgi").require("AstalBluetooth")

        local bluetooth = Bluetooth.get_default()

        for _, d in ipairs(bluetooth.devices) do
            print(d.name)
        end
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc gobject-introspection
        ```

        :::

        ::: info
        Although bluez is not a direct build dependency,
        it should be self-explanatory that the daemon is required to be available at runtime.
        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/bluetooth
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  9:
    hash: c6622c27edd48d19ee957feb1d21387eaf716961c5fe377d0d3175a0532de2c9
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/apps.md
    documents:
    - page_content: |-
        # Apps

        Library and CLI tool for querying and launching
        applications that have a corresponding `.desktop` file.

        ## Usage

        You can browse the [Apps reference](https://aylur.github.io/libastal/apps).

        ### CLI

        ```sh
        astal-apps --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Apps from "gi://AstalApps"

        const apps = new Apps.Apps({
            nameMultiplier: 2,
            entryMultiplier: 0,
            executableMultiplier: 2,
        })

        for (const app of apps.fuzzy_query("spotify")) {
            print(app.name)
        }
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalApps as Apps

        apps = Apps.Apps(
            name_multiplier=2,
            entry_multiplier=0,
            executable_multiplier=2,
        )

        for app in apps.fuzzy_query("obsidian"):
            print(app.get_name())

        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Apps = require("lgi").require("AstalApps")

        local apps = Apps.Apps({
            name_multiplier = 2,
            entry_multiplier = 0,
            executable_multiplier = 2,
        })

        for _, app in ipairs(apps:fuzzy_query("lutris")) do
            print(app.name)
        end
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        var apps = new AstalApps.Apps() {
            name_multiplier = 2,
            entry_multiplier = 0,
            executable_multiplier = 2,
        };

        foreach (var app in apps.fuzzy_query("firefox")) {
            print(app.name);
        }
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libjson-glib-dev gobject-introspection
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/apps
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  10:
    hash: c1a91328c04eaa56591102fdcc13f3e867feb4e1b9e4819740681733354b1c3a
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/notifd.md
    documents:
    - page_content: |-
        # Notifd

        A [notification daemon](https://specifications.freedesktop.org/notification-spec/latest/) implementation as a library and CLI tool.

        ## How it works

        The first instantiation of the [Notifd](https://aylur.github.io/libastal/notifd/class.Notifd.html) class will become the daemon and every subsequent instantiation will queue up to act as the daemon and will act as a client in the meantime. This means this library can be used throughout multiple processes.

        ## Usage

        You can browse the [Notifd reference](https://aylur.github.io/libastal/notifd).

        ### CLI

        ```sh
        astal-notifd --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Notifd from "gi://AstalNotifd"

        const notifd = Notifd.get_default()

        notifd.connect("notified", (_, id) => {
            const n = notifd.get_notification(id)
            print(n.summary, n.body)
        })
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalNotifd as Notifd

        notifd = Notifd.get_default()

        def on_notified(_, id):
            n = notifd.get_notification(id)
            print(n.get_body(), n.get_body())

        notifd.connect("notified", on_notified)
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Notifd = require("lgi").require("AstalNotifd")

        local notifd = Notifd.get_default()

        notifd.on_notified = function(_, id)
            local n = notifd.get_notification(id)
            print(n.body, n.summary)
        end
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc gdk-pixbuf2 json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc gdk-pixbuf2-devel json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libgdk-pixbuf-2.0-dev libjson-glib-dev gobject-introspection
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/notifd
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  11:
    hash: 2ddb73632ac897e77ad98d6b16b949771217b48c0815a155803bd458a1845d10
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/greet.md
    documents:
    - page_content: |-
        # Greet

        Library and CLI tool for sending requests to [greetd](https://sr.ht/~kennylevinsen/greetd/).

        ## Usage

        You can browse the [Greet reference](https://aylur.github.io/libastal/greet).

        ### CLI

        ```sh
        astal-greet --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Greet from "gi://AstalGreet"

        Greet.login("username", "password", "compositor", (_, res) => {
            try {
                Greet.login_finish(res)
            } catch (err) {
                printerr(err)
            }
        })
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        # Not yet documented

        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Greet = require("lgi").require("AstalGreet")

        Greet.login("username", "password", "compositor", function (_, res)
            local err = Greet.login_finish(res)
            if err ~= nil then
                print(err)
            end
        end)
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        try {
            yield AstalGreet.login("username", "password", "compositor");
        } catch (Error err) {
            printerr(err.message);
        }
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libjson-glib-dev gobject-introspection
        ```

        :::

        ::: info
        Although `greetd` is not a direct build dependency,
        it should be self-explanatory that the daemon is required to be available at runtime.
        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/greet
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  12:
    hash: 0472d48398994339aa7840d59dee56cd32cea6a22ce86af4978c1f9580625bf9
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/mpris.md
    documents:
    - page_content: |-
        # Mpris

        Library and CLI tool for interacting and monitoring media players
        exposing an mpris interface through dbus.

        An alternative for [playerctl](https://github.com/altdesktop/playerctl) that better integrates
        with astal.

        ## Usage

        You can browse the [Mpris reference](https://aylur.github.io/libastal/mpris).

        ### CLI

        ```sh
        astal-mpris --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Mpris from "gi://AstalMpris"

        const spotify = Mpris.Player.new("spotify")

        if (spotify.available)
            print(spotify.title)
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalMpris as Mpris

        spotify = Mpris.Player.new("spotify")

        if spotify.get_available():
            print(spotify.get_title())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Mpris = require("lgi").require("AstalMpris")

        local spotify = Mpris.Player.new("spotify")

        if spotify.available then
            print(spotify.title)
        end
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc gvfs json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc gvfs json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc gvfs libjson-glib-dev gobject-introspection
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/mpris
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```

        :::warning
        In order for network cover art urls to be cached (spotify for example)
        make sure `gvfs` is enabled.

        :::code-group

        ```nix [<i class="devicon-nixos-plain"></i> configuration.nix]
        services.gvfs.enable = true;
        ```

        :::
      metadata: {}
  13:
    hash: 67122c2497bed60695fb060d036c54af71bf9dfd6b3b5be96ab2e3f7ba599d05
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/network.md
    documents:
    - page_content: |-
        # Network

        Wrapper library over [networkmanager](https://networkmanager.dev/) to better integrate with Astal.

        ## Usage

        You can browse the [Network reference](https://aylur.github.io/libastal/network).

        ### CLI

        There is no CLI for this library, use the one provided by networkmanager.

        ```sh
        nmcli --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Network from "gi://AstalNetwork"

        const network = Network.get_default()

        print(network.wifi.ssid)
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalNetwork as Network

        network = Network.get_default()

        print(network.get_wifi().get_ssid())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Network = require("lgi").require("AstalNetwork")

        local network = Network.get_default()

        print(network.wifi.ssid)
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc libnm gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc NetworkManager-libnm-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libnm-dev gobject-introspection
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/network
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  14:
    hash: 7a344ad21f4904592225933673399968056bea83c8e241f1a9d7e0ad746a0c95
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/hyprland.md
    documents:
    - page_content: |-
        # Hyprland

        Library and CLI tool for monitoring the [Hyprland socket](https://wiki.hyprland.org/IPC/).

        ## Usage

        You can browse the [Hyprland reference](https://aylur.github.io/libastal/hyprland).

        ### CLI

        ```sh
        astal-hyprland # starts monitoring
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Hyprland from "gi://AstalHyprland"

        const hyprland = Hyprland.get_default()

        for (const client of hyprland.get_clients()) {
            print(client.title)
        }
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalHyprland as Hyprland

        hyprland = Hyprland.get_default()

        for client in hyprland.get_clients():
            print(client.get_title())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Hyprland = require("lgi").require("AstalHyprland")

        local hyprland = Hyprland.get_default()

        for _, c in ipairs(hyprland.clients) do
            print(c.title)
        end
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libjson-glib-dev gobject-introspection
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/hyprland
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  15:
    hash: 607ab1ced25f25cde4473ea30fafdba47f43fec1971a9cb57ed50e807f65bc82
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/wireplumber.md
    documents:
    - page_content: |-
        # Wire Plumber

        Wrapper library over [wireplumber](https://pipewire.pages.freedesktop.org/wireplumber/) to better integrate with Astal.
      metadata: {}
    - page_content: |-
        ## Usage

        You can browse the [Wireplumber reference](https://aylur.github.io/libastal/wireplumber).

        ### CLI

        There is no CLI for this library, use the one provided by wireplumber.

        ```sh
        wpctl --help
        ```

        ### Library

        The AstalWp library is initialized asynchronously; therefore, all lists (e.g. `audio.speakers`) are initially empty, and the properties have default values.
        This is usually not an issue. When you bind to these values, your widget will receive updates as soon as the library has loaded the data.
        However, this means that you won't get the correct data when accessing the library's properties at the top level. To accommodate this, it emits the `ready` signal once, as soon as the initial data has been loaded.

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Wp from "gi://AstalWp"

        const wp = Wp.get_default()
        const default_speaker = wp.audio.default_speaker;

        wp.connect("ready", () => {
            print(default_speaker.volume)
        }
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalWp as Wp

        audio = Wp.get_default().get_audio()

        print(audio.get_default_speaker().get_volume())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Wp = require("lgi").require("AstalWp")

        local audio = Wp.get_default().audio

        print(audio.default_speaker.volume)
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc wireplumber gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc wireplumber-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        # Not yet documented
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/wireplumber
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  16:
    hash: 58824b27b0765dfed82032a5f6e1b001bdaf4b98bb861b17b5806bd47f31b117
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/tray.md
    documents:
    - page_content: |-
        # Tray

        Library for managing the systemtray by implementing the [StatusNotifierItem](https://www.freedesktop.org/wiki/Specifications/StatusNotifierItem/) protocol.

        ## Usage

        You can browse the [Tray reference](https://aylur.github.io/libastal/tray).

        ### CLI

        ```sh
        astal-tray --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import Tray from "gi://AstalTray"

        const tray = Tray.get_default()

        for (const item of tray.get_items()) {
            print(item.title)
        }
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalTray as Tray

        tray = Tray.get_default()

        for item in tray.get_items():
            print(item.title)
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local Tray = require("lgi").require("AstalTray")

        local tray = Tray.get_default()

        for _, i in ipairs(tray.items) do
            print(i.title)
        end
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson libjson-glib-dev gobject-introspection
        ```

        :::

        2. install `appmenu-glib-translator`

        ```sh
        git clone https://github.com/rilian-la-te/vala-panel-appmenu.git
        cd vala-panel-appmenu/subprojects/appmenu-glib-translator
        meson setup --prefix /usr build
        meson install -C build
        ```

        3. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/tray
        ```

        4. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  17:
    hash: ca0099167aa70d7c137e712e8c0aaadc8c3be1fc86a1575af4ec096c450936f3
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/river.md
    documents:
    - page_content: |-
        # River

        Library and CLI tool for monitoring the [River Wayland Compositor](https://isaacfreund.com/software/river/).

        ## Usage

        You can browse the [River reference](https://aylur.github.io/libastal/river).

        ### CLI

        ```sh
        astal-river --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import River from "gi://AstalRiver"

        const river = River.get_default()

        for (const output of river.get_outputs()) {
            print(output.name)
        }
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalRiver as River

        river = River.get_default()

        for output in river.get_outputs():
            print(output.get_name())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local River = require("lgi").require("AstalRiver")

        local river = River.River.get_default()

        for _, o in ipairs(river.outputs) do
            print(o.name)
        end
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson gcc json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson libjson-glib-dev gobject-introspection
        ```

        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/river
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  18:
    hash: 23a51352f176740e6646f4eca4c2999457e21eef6d0d8868bdd4b1ec5c735103
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/references.md
    documents:
    - page_content: |-
        # References

        The references of the libraries are annotated for the C language.
        Reading their documentation will vary depending on the language they are used in.

        <!--TODO: list some examples on how to read docs,-->
        <!--for example the difference between C enums and gjs enums-->

        ## Additional references

        ### GJS

        - [gjs-docs.gnome.org](https://gjs-docs.gnome.org/): Library references annotated for GJS
        - [gjs.guide](https://gjs.guide/): GJS and GObject guide

        ### Python

        - [pgi-docs](https://lazka.github.io/pgi-docs/): Library references annotated for Python
        - [pygobject.gnome.org](https://pygobject.gnome.org/): PyGObject reference and guide

        ### Lua

        - [lua-lgi docs](https://github.com/lgi-devs/lgi/tree/master/docs): GObject bindings guide for Lua

        ### Vala

        - [vala.dev](https://vala.dev/): Guide for the Vala language
        - [valadoc.org](https://valadoc.org/): Library references annotated for Vala
      metadata: {}
    - page_content: |-
        ## Astal Libraries

        - [Apps](https://aylur.github.io/libastal/apps): Library and cli tool for querying applications
        - [Auth](https://aylur.github.io/libastal/auth): Authentication library using PAM
        - [Battery](https://aylur.github.io/libastal/battery): DBus proxy library for upower daemon
        - [Bluetooth](https://aylur.github.io/libastal/bluetooth): Library to control bluez over dbus
        - [Cava](https://aylur.github.io/libastal/cava): Audio visualizer library using cava
        - [Greet](https://aylur.github.io/libastal/greet): Library and CLI tool for sending requests to greetd
        - [Hyprland](https://aylur.github.io/libastal/hyprland): Library and cli tool for Hyprland IPC socket
        - [Mpris](https://aylur.github.io/libastal/mpris): Library and cli tool for controlling media players
        - [Network](https://aylur.github.io/libastal/network): NetworkManager wrapper library
        - [Notifd](https://aylur.github.io/libastal/notifd): A notification daemon library and cli tool
        - [PowerProfiles](https://aylur.github.io/libastal/powerprofiles): Library and cli to control upowerd powerprofiles
        - [River](https://aylur.github.io/libastal/river): Library and cli tool for getting status information of the river wayland compositor
        - [Tray](https://aylur.github.io/libastal/tray): A systemtray library and cli tool
        - [WirePlumber](https://aylur.github.io/libastal/wireplumber): A library for audio control using wireplumber
      metadata: {}
  19:
    hash: 96755234111ddb3b7f18f0333faecbc90483fdadb184d511d9c0f3d1bfc84acd
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/libraries/powerprofiles.md
    documents:
    - page_content: |-
        # Power Profiles

        Library and CLI tool for monitoring [upowerd](https://upower.freedesktop.org/) powerprofiles.

        ## Usage

        You can browse the [PowerProfiles reference](https://aylur.github.io/libastal/powerprofiles).

        ### CLI

        ```sh
        astal-power-profiles --help
        ```

        ### Library

        :::code-group

        ```js [<i class="devicon-javascript-plain"></i> JavaScript]
        import PowerProfiles from "gi://AstalPowerProfiles"

        const powerprofiles = PowerProfiles.get_default()

        print(powerprofiles.activeProfile)
        ```

        ```py [<i class="devicon-python-plain"></i> Python]
        from gi.repository import AstalPowerProfiles as PowerProfiles

        powerprofiles = PowerProfiles.get_default()

        print(powerprofiles.get_active_profile())
        ```

        ```lua [<i class="devicon-lua-plain"></i> Lua]
        local PowerProfiles = require("lgi").require("AstalPowerProfiles")

        local powerprofiles = PowerProfiles.get_default()

        print(powerprofiles.active_profile)
        ```

        ```vala [<i class="devicon-vala-plain"></i> Vala]
        // Not yet documented
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Installation

        1. install dependencies

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu meson vala valadoc json-glib gobject-introspection
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        sudo dnf install meson vala valadoc json-glib-devel gobject-introspection-devel
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        sudo apt install meson valac valadoc libjson-glib-dev gobject-introspection
        ```

        :::

        ::: info
        Although UPower is not a direct build dependency,
        it should be self-explanatory that the daemon is required to be available at runtime.
        :::

        2. clone repo

        ```sh
        git clone https://github.com/aylur/astal.git
        cd astal/lib/powerprofiles
        ```

        3. install

        ```sh
        meson setup --prefix /usr build
        meson install -C build
        ```
      metadata: {}
  20:
    hash: cbd3383bf390c477e59a1c1370e6517e2b15304193a4ee6b710975225c508542
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/installation.md
    documents:
    - page_content: |-
        # Installation

        ## Nix

        maintainer: [@Aylur](https://github.com/Aylur)

        Read more about it on the [nix page](../getting-started/nix)

        ## Arch

        ```sh
        yay -S libastal-lua-git
        ```

        ## From Source

        1. [Install Astal](../getting-started/installation.md) if you have not already

        2. Install the Astal Lua package

        ```sh
        git clone https://github.com/aylur/astal.git
        cd lang/lua
        sudo luarocks make
        ```
      metadata: {}
  21:
    hash: 6b72d3e476bea56317d20b996d33d2deedc99a39c49c7438b9b0b8aa0f398a52
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/examples.md
    documents:
    - page_content: |-
        # Lua examples

        ## [Simple Bar](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/simple-bar)
        ![simple-bar](https://github.com/user-attachments/assets/a306c864-56b7-44c4-8820-81f424f32b9b)

        ### [Notification Popups](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/notifications)
        ![notification-popups](https://github.com/user-attachments/assets/0df0eddc-5c74-4af0-a694-48dc8ec6bb44)

        ### [Applauncher](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/applauncher)
        ![launcher](https://github.com/user-attachments/assets/2695e3bb-dff4-478a-b392-279fe638bfd3)

        ### [Media Player](https://github.com/Aylur/astal/tree/main/examples/gtk3/lua/media-player)
        ![media-player](https://github.com/user-attachments/assets/891e9706-74db-4505-bd83-c3628d7b4fd0)
      metadata: {}
  22:
    hash: d87403f3c7250ebc6d4f87699bc3d0aee2dfc16e69e35fa7ee6cbf9864112ee4
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/cli-app.md
    documents:
    - page_content: |-
        # CLI and App

        `App` is a singleton **instance** of an [Astal.Application](https://aylur.github.io/libastal/astal3/class.Application.html).

        Depending on gtk version require paths will differ

        <!--TODO: remove gtk4 notice when its available-->

        ```lua
        local App = require("astal.gtk3.app")

        local App = require("astal.gtk4.app") -- not yet available
        ```

        ## Entry point

        `App:start` is a wrapper function for `App:run`
        that will only run the application if there is no
        instance already running with the specified name.

        :::code-group

        ```lua [init.lua]
        App:start({
            instance_name = "my-instance", -- defaults to "astal"
            main = function()
                -- setup anything
                -- instantiate widgets
            end,
        })
        ```

        :::

        ## Messaging from CLI

        If you want to interact with an instance from the CLI,
        you can do so by sending a request.

        ```lua
        App:start({
            main = function() end,

            ---@param request string
            ---@param res fun(response: any): nil
            request_handler = function(request, res)
                if request == "say hi" then
                    return res("hi cli")
                end
                res("unknown command")
            end
        })
        ```

        ```sh
        astal say hi
        # hi cli
        ```
      metadata: {}
    - page_content: |-
        ## Toggling Windows by their name

        In order for Astal to know about your windows, you have to register them.
        You can do this by specifying a **unique** `name` and calling `App:add_window`.

        ```lua
        local App = require("astal.gtk3.app")

        local function Bar()
            return Widget.Window({
                name = "Bar",
                setup = function(self)
                    App:add_window(self)
                end,
                Widget.Box()
            })
        end
        ```

        You can also invoke `App:add_window` by simply passing the `App` to the `application` prop.

        ```lua
        local App = require("astal.gtk3.app")

        local function Bar()
            return Widget.Window({
                name = "Bar",
                application = App,
                Widget.Box()
            })
        end
        ```

        ```sh
        astal -t Bar
        ```

        :::warning
        When assigning the `application` prop make sure `name` comes before.
        Props are set sequentially and if name is applied after application it won't work.
        :::
      metadata: {}
    - page_content: |-
        ## Client instances

        The first time `App:start` is invoked the `main` function gets called.
        While that instance is running any subsequent execution of the script will call
        the `client` function.

        :::code-group

        ```lua [init.lua]
        App:start({
            -- main instance
            main = function(...)
                local args = { ... }
                print(string.format("{%s}", table.concat(args, ", ")))
            end,

            -- client instance
            client = function(request, ...)
                local res = request("you can send a request to the main instance")
                print(res)
            end,

            -- this runs in the main instance
            request_handler = function(request, res)
                res("response from main instance")
            end
        })
        ```

        :::
      metadata: {}
  23:
    hash: 0bf940ee4f5e8af319bfe6d97f3cfa26106654b9fabfc8ef61f35af74de16ea7
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/binding.md
    documents:
    - page_content: |-
        # Binding

        As mentioned before binding an object's state to another -
        so in most cases a `Variable` or a `GObject.Object` property to a widget's property -
        is done through the `bind` function which returns a `Binding` object.

        `Binding` objects simply hold information about the source and how it should be transformed
        which Widget constructors can use to setup a connection between themselves and the source.

        ```lua
        ---@class Binding<T>
        ---@field private transform_fn fun(value: T): any
        ---@field private emitter Connectable | Subscribable<T>
        ---@field private property? string
        ---@field as fun(transform: fun(value: T): any): Binding
        ---@field get fun(): T
        ---@field subscribe fun(self, callback: fun(value: T)): function
        ```

        A `Binding` can be constructed from an object implementing
        the `Subscribable` interface (usually a `Variable`)
        or an object implementing the `Connectable` interface and one of its properties
        (usually a `GObject.Object` instance).

        Lua type annotations are not expressive enough to explain this,
        so I'll use TypeScript to demonstrate it.

        <!--TODO: use Teal maybe?-->

        ```ts
        function bind<T>(obj: Subscribable<T>): Binding<T>

        function bind<
            Obj extends Connectable,
            Prop extends keyof Obj,
        >(obj: Obj, prop: Prop): Binding<Obj[Prop]>
        ```
      metadata: {}
    - page_content: |-
        ## Subscribable and Connectable interface

        Any object implementing one of these interfaces can be used with `bind`.

        ```ts
        interface Subscribable<T> {
            subscribe(callback: (value: T) => void): () => void
            get(): T
        }

        interface Connectable {
            connect(signal: string, callback: (...args: any[]) => unknown): number
            disconnect(id: number): void
        }
        ```

        `Connectable` is usually used for GObjects coming from [libraries](../libraries/references)
        You won't be implementing it in Lua code.
      metadata: {}
    - page_content: |-
        ## Example Custom Subscribable

        When binding the children of a box from an array, usually not all elements
        of the array changes each time, so it would make sense to not destroy
        the widget which represents the element.

        ::: code-group

        ```lua :line-numbers [varmap.lua]
        local Gtk = require("astal.gtk3").Gtk
        local Variable = require("astal.variable")

        ---@param initial table
        ---@return varmap
        return function(initial)
            local map = initial
            local var = Variable.new({})

            local function notify()
                local arr = {}
                for _, value in pairs(map) do
                    table.insert(arr, value)
                end
                var:set(arr)
            end

            local function delete(key)
                if Gtk.Widget:is_type_of(map[key]) then
                    map[key]:destroy()
                end

                map[key] = nil
            end

            notify() -- init
      metadata: {}
    - page_content: |-
        map[key] = nil
            end

            notify() -- init

            ---@class varmap
            ---@field set fun(key: any, value: any): nil
            ---@field delete fun(key: any): nil
            ---@field get fun(): any
            ---@field subscribe fun(callback: function): function
            ---@overload fun(): Binding
            return setmetatable({
                set = function(key, value)
                    delete(key)
                    map[key] = value
                    notify()
                end,
                delete = function(key)
                    delete(key)
                    notify()
                end,
                get = function()
                    return var:get()
                end,
                subscribe = function(callback)
                    return var:subscribe(callback)
                end,
            }, {
                __call = function()
                    return var()
                end,
            })
        end
      metadata: {}
    - page_content: |-
        ```

        :::

        And this `VarMap<key, Widget>` can be used as an alternative to `Variable<Array<Widget>>`.

        ```lua
        function MappedBox()
            local map = varmap({
                ["1"] = Widget.Label({ label = "1" }),
                ["2"] = Widget.Label({ label = "2" }),
            })

            return Widget.Box({
                setup = function (self)
                    self:hook(gobject, "added", function (_, id)
                        map.set(id, Widget.Label({ label = id }))
                    end)
                    self:hook(gobject, "removed", function (_, id)
                        map.delete(id)
                    end)
                end,
                map():as(function(arr)
                    -- can be sorted here
                    return arr
                end),
            })
        end
        ```
      metadata: {}
  24:
    hash: fc74389088fed6e21789094a69a27e4e7ef6372e4805311c8815c38fe6820691
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/first-widgets.md
    documents:
    - page_content: |-
        # First Widgets

        ## Getting Started

        Start by importing the singleton
        [Astal.Application](https://aylur.github.io/libastal/astal3/class.Application.html) instance.

        :::code-group

        ```lua [init.lua]
        local App = require("astal.gtk3.app")

        App:start({
            main = function()
                -- you will instantiate Widgets here
                -- and setup anything else if you need
            end
        })
        ```

        :::

        Then run `lua init.lua` in the terminal, and that's it!
        Now you have an Astal instance running written in Lua.

        ## Root of every shell component: Window

        Astal apps are composed of widgets. A widget is a piece of UI that has its own logic and style.
        A widget can be as small as a button or an entire bar.
        The top level widget is always a [Window](https://aylur.github.io/libastal/astal3/class.Window.html)
        which will hold all widgets.

        ::: code-group

        ```lua [widget/Bar.lua]
        local Widget = require("astal.gtk3.widget")
        local Anchor = require("astal.gtk3").Astal.WindowAnchor

        return function(monitor)
            return Widget.Window({
                monitor = monitor,
                anchor = Anchor.TOP + Anchor.LEFT + Anchor.RIGHT,
                exclusivity = "EXCLUSIVE",
                Widget.Label({
                    label = "Example label content",
                }),
            })
        end
        ```

        :::

        ::: code-group

        ```lua [init.lua]
        local App = require("astal.gtk3.app")
        local Bar = require("widget.Bar")

        App:start {
            main = function()
                Bar(0)
                Bar(1) -- instantiate for each monitor
            end,
        }
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Creating and nesting widgets

        Widgets are simply Lua functions that return Gtk widgets,
        you can nest widgets by passing them as arguments to the table in the function.

        :::code-group

        ```lua [widget/MyButton.lua]
        local Widget = require("astal.gtk3.widget")

        return function(text)
            return Widget.Button({
                on_click_release = function(_, event)
                    if event.button == "PRIMARY" then
                        print("Left click")
                    elseif event.button == "SECONDARY" then
                        print("Right click")
                    end
                end,
                Widget.Label({
                    label = text,
                }),
            })
        end
        ```

        :::

        Now, you should be able to nest it into another widgets.

        ::: code-group

        ```lua [widget/Bar.lua] {13}
        local MyButton = require("widget.MyButton")
        local Anchor = require("astal.gtk3").Astal.WindowAnchor

        return function(monitor)
            return Widget.Window({
                monitor = monitor,
                anchor = Anchor.TOP + Anchor.LEFT + Anchor.RIGHT,
                exclusivity = "EXCLUSIVE",
                Widget.Box({
                    Widget.Label({
                        label = "Click the button",
                    }),
                    MyButton("hi, im a button"),
                }),
            })
        end
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Widget signal handlers

        You can respond to events by declaring event handler functions inside your widget:

        ```lua
        local function MyButton()
            return Widget.Button({
                on_click_release = function(_, event)
                    print(event.button)
                end,
            })
        end
        ```

        :::info
        Keys prefixed with `on_` will connect to a `signal` of the widget.
        Refer to the Gtk and Astal docs to have a full list of them.
        :::
      metadata: {}
    - page_content: |-
        ## State management

        The state of widgets are handled with Bindings. A [Binding](./binding) lets you
        connect the state of an [object](./binding#subscribable-and-connectable-interface)
        to a widget so it re-renders when that state changes.

        Use the `bind` function to create a `Binding` object from a `Variable` or
        a regular `GObject` and one of its properties.

        Here is an example of a Counter widget that uses a `Variable` as its state:

        ```lua
        local astal = require("astal")
        local bind = astal.bind
        local Variable = astal.Variable
        local Widget = require("astal.gtk3.widget")

        local function Counter()
            local count = Variable(0)
            return Widget.Box({
                Widget.Label({
                    label = bind(count):as(tostring),
                }),
                Widget.Button({
                    label = "Click to increment",
                    on_click_release = function()
                        count:set(count:get() + 1)
                    end,
                }),
            })
        end
        ```

        :::info
        Bindings have an `:as()` method which lets you transform the assigned value.
        In the case of a Label, its label property expects a string, so it needs to be
        converted into a string first.
        :::

        :::tip
        `Variables` have a shorthand for `bind(variable):as(transform)`

        ```lua
        local v = Variable(0)

        return Widget.Box {
            -- these three are equivalent
            Widget.Label({ label = bind(v):as(tostring) }),
            Widget.Label({ label = v():as(tostring) }),
            Widget.Label({ label = v(tostring) }),
        }
      metadata: {}
    - page_content: |-
        ```

        :::

        Here is an example of a battery percent label that binds the `percentage`
        property of the Battery object from the [Battery Library](/guide/libraries/battery):

        ```lua
        local astal = require("astal")
        local bind = astal.bind
        local Battery = astal.require("AstalBattery")
        local Widget = require("astal.gtk3.widget")

        local function BatteryPercentage()
            local bat = Battery.get_default()

            return Widget.Label({
                label = bind(bat, "percentage"):as(function(p)
                    return string.format("%.0f%%", p * 100)
                end),
            })
        end
        ```
      metadata: {}
    - page_content: |-
        ## Dynamic children

        You can also use a `Binding` for `child` and `children` properties.

        ```lua
        local astal = require("astal")
        local Variable = astal.Variable
        local Widget = require("astal.gtk3.widget")

        local child = Variable(Widget.Box())

        return Widget.Box({
            child(),
        })
        ```

        ```lua
        local num = Variable(3)

        return Widget.Box {
            num():as(function(n)
                local tbl = {}
                for i = 1, n do
                    table.insert(tbl, Widget.Button({
                        label = tostring(i)
                    }))
                end
                return tbl
            end)
        }
        ```

        :::tip
        Binding children of widgets will implicitly call `:destroy()` on widgets
        that would be left without a parent. You can opt out of this behavior
        by setting `no_implicity_destroy` property on the container widget.
        :::

        :::info
        You can pass the followings as children:

        - widgets
        - deeply nested arrays of widgets
        - bindings of widgets,
        - bindings of deeply nested arrays of widgets

        `nil` is the only value that is not rendered and anything not from this list
        will be coerced into a string and rendered as a label.
        :::
      metadata: {}
  25:
    hash: 29934aaab6d7eed73baae6cefb40d5b041a9d64cd87e1545648f61c1782ec3f0
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/theming.md
    documents:
    - page_content: |-
        # Theming

        Since the widget toolkit is **GTK3** theming is done with **CSS**.

        - [CSS tutorial](https://www.w3schools.com/css/)
        - [GTK CSS Overview wiki](https://docs.gtk.org/gtk3/css-overview.html)
        - [GTK CSS Properties Overview wiki](https://docs.gtk.org/gtk3/css-properties.html)

        :::warning GTK is not the web
        While most features are implemented in GTK,
        you can't assume anything that works on the web will work with GTK.
        Refer to the [GTK docs](https://docs.gtk.org/gtk3/css-overview.html)
        to see what is available.
        :::

        So far every widget you made used your default GTK3 theme.
        To make them more custom, you can apply stylesheets to them.

        ## From file at startup

        You can pass a path to a file or css as a string in `App:start`

        :::code-group

        ```lua [init.lua]
        local inline_css = [[
            window {
                background-color: transparent;
            }
        ]]

        App:start({
            css = inline_css,
            css = "/path/to/style.css",
            css = "./style.css",
        })
        ```

        :::

        :::warning
        When using relative paths, for example `./style.css` keep in mind that they
        will be relative to the current working directory.
        :::

        ## Css Property on Widgets

        ```lua
        Widget.Label({
            css = "color: blue; padding: 1em;",
            label = "hello"
        })
        ```

        :::info
        The `css` property of a widget will not cascade to its children.
        :::
      metadata: {}
    - page_content: |-
        ## Apply Stylesheets at Runtime

        You can apply additional styles at runtime.

        ```lua
        App:apply_css("/path/to/file.css")
        ```

        ```lua
        App:apply_css([[
            window {
                background-color: transparent;
            }
        ]])
        ```

        ```lua
        App:reset_css() -- reset if need
        ```

        :::warning
        `App:apply_css` will apply on top of other stylesheets applied before.
        You can reset stylesheets with `App:reset_css`
        or by passing `true` as a second parameter to `App:apply_css`.
        :::

        ## Inspector

        If you are not sure about the widget hierarchy or any CSS selector,
        you can use the [GTK inspector](https://wiki.gnome.org/Projects/GTK/Inspector)

        ```sh
        # to bring up the inspector run
        astal --inspector
        ```

        ## Using SCSS

        Gtk's CSS only supports a subset of what the web offers.
        Most notably nested selectors are unsupported by Gtk, but this can be
        workaround by using preprocessors like [SCSS](https://sass-lang.com/).

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu dart-sass
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        npm install -g sass # not packaged on Fedora
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        npm install -g sass # not packaged on Ubuntu
        ```

        :::

        :::code-group

        ```lua [init.lua]
        local scss = "./style.scss"
        local css = "/tmp/style.css"

        astal.exec(string.format("sass %s %s", scss, css))

        App:start({
            css = css,
        })
        ```

        :::
      metadata: {}
  26:
    hash: 219cd46cea974cb7a2b847ee762fbfb5f5cb90baa0c2e793c322ea97965ab225
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/variable.md
    documents:
    - page_content: |-
        # Variable

        ```lua
        local Variable = require("astal").Variable
        local Variable = require("astal.variable")
        ```

        Variable is just a simple object which holds a single value.
        It also has some shortcuts for hooking up subprocesses, intervals and other gobjects.

        ## Example Usage

        ```lua
        local my_var = Variable("initial-value")

        -- whenever its value changes, callback will be executed
        my_var:subscribe(function(value)
            print(value)
        end)

        -- settings its value
        my_var:set("new value")

        -- getting its value
        local value = my_var:get()

        -- binding them to widgets
        Widget.Label({
            label = bind(my_var):as(function(value)
                return string.format("transformed %s", value)
            end),
            -- shorthand for the above
            label = my_var(function(value)
                return string.format("transformed %s", value)
            end)
        })
        ```

        :::warning
        Make sure to the transform functions you pass to `:as()` are pure.
        The `:get()` function can be called anytime by `astal` especially when `deriving`,
        so make sure there are no sideeffects.
        :::
      metadata: {}
    - page_content: |-
        ## Variable Composition

        Using `Variable.derive` any `Subscribable` object can be composed.

        ```lua
        local v1 = Variable(1) -- Variable
        local v2 = bind(obj, "prop") -- Binding
        local v3 = { -- Subscribable
            get = function()
                return 3
            end,
            subscribe = function()
                return function() end
            end,
        }

        -- first argument is a list of dependencies
        -- second argument is a transform function,
        -- where the parameters are the values of the dependencies in the order they were passed
        local v4 = Variable.derive({ v1, v2, v3 }, function(v1, v2, v3)
            return v1 * v2 * v3
        end)
        ```
      metadata: {}
    - page_content: |-
        ## Subprocess shorthands

        Using `:poll` and `:watch` you can start subprocesses and capture their
        output. They can poll and watch at the same time, but they
        can only poll/watch once.

        :::warning
        The command parameter is passed to [exec_async](/guide/lua/utilities#executing-external-commands-and-scripts)
        which means they are **not** executed in a shell environment,
        they do **not** expand ENV variables like `$HOME`,
        and they do **not** handle logical operators like `&&` and `||`.

        If you want bash, run them with bash.

        ```lua
        Variable(""):poll(1000, { "bash", "-c", "command $VAR && command" })
        ```

        :::

        ```lua
        local my_var = Variable(0)
            :poll(1000, "command", function(out, prev)
                return tonumber(out)
            end)
            :poll(1000, { "bash", "-c", "command" }, function(out, prev)
                return tonumber(out)
            end)
            :poll(1000, function(prev)
                return prev + 1
            end)
        ```

        ```lua
        local my_var = Variable(0)
            :watch("command", function(out, prev)
                return tonumber(out)
            end)
            :watch({ "bash", "-c", "command" }, function(out, prev)
                return tonumber(out)
            end)
        ```

        You can temporarily stop them and restart them whenever.

        ```lua
        my_var:stop_watch() -- this kills the subprocess
        my_var:stop_poll()

        my_var:start_listen() -- launches the subprocess again
        my_var:start_poll()

        print(my_var:is_listening())
        print(my_var:is_polling())
        ```
      metadata: {}
    - page_content: |-
        ## Gobject connection shorthands

        Using `:observe` you can connect gobject signals and capture their value.

        ```lua
        local my_var = Variable("")
            :observe(obj1, "signal", function()
                return ""
            end):observe(obj2, "signal", function()
                return ""
            end)
        ```

        ## Dispose if no longer needed

        This will stop the interval, force exit the subprocess and disconnect gobjects.

        ```lua
        my_var:drop()
        ```

        :::warning
        Don't forget to drop derived variables or variables with
        either `:poll`, `:watch` or `:observe` when they are defined inside closures.

        ```lua
        local function MyWidget()
            local my_var = Variable():poll()

            return Widget.Box({
                on_destroy = function()
                    my_var:drop()
                end
            })
        end
        ```

        :::
      metadata: {}
  27:
    hash: ca2d57042f7264a4be0b0e2cd99d041b641c0f46ce89709121394afe4d3812b9
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/utilities.md
    documents:
    - page_content: |-
        # Utilities

        ## File functions

        ```lua
        local read_file = astal.read_file
        local read_file_async = astal.read_file_async
        local write_file = astal.write_file
        local write_file_async = astal.write_file_async
        local monitor_file = astal.monitor_file
        ```

        ### Reading files

        ```lua
        ---@param path string
        ---@return string
        local function read_file(path) end

        ---@param path string
        ---@param callback fun(content: string, err: string): nil
        local function read_file_async(path, callback) end
        ```

        ### Writing files

        ```lua
        ---@param path string
        ---@param content string
        local function write_file(path, content) end

        ---@param path string
        ---@param content string
        ---@param callback? fun(err: string): nil
        local function write_file_async(path, content, callback) end
        ```

        ### Monitoring files

        ```lua
        ---@param path string
        ---@param callback fun(file: string, event: Gio.FileMonitorEvent): nil
        local function monitor_file(path, callback) end
        ```
      metadata: {}
    - page_content: |-
        ## Timeouts and Intervals

        ```lua
        local interval = astal.interval
        local timeout = astal.timeout
        local idle = astal.idle
        ```

        ### Interval

        Will immediately execute the function and every `interval` millisecond.

        ```lua
        ---@param interval number
        ---@param callback? function
        ---@return Astal.Time
        local function interval(interval, callback) end
        ```

        ### Timeout

        Will execute the `callback` after `timeout` millisecond.

        ```lua
        ---@param timeout number
        ---@param callback? function
        ---@return Astal.Time
        local function timeout(timeout, callback) end
        ```

        ### Idle

        Executes `callback` whenever there are no higher priority events pending.

        ```lua
        ---@param callback? function
        ---@return Astal.Time
        local function idle(callback) end
        ```

        Example:

        ```lua
        local timer = interval(1000, function()
            print("optional callback")
        end)

        timer.on_now = function()
            print("now")
        end

        timer.on_cancelled = function()
            print("cancelled")
        end

        timer:cancel()
        ```
      metadata: {}
    - page_content: |-
        ## Process functions

        ```lua
        local subprocess = astal.subprocess
        local exec = astal.exec
        local exec_async = astal.exec_async
        ```

        ### Subprocess

        You can start a subprocess and run callback functions whenever it outputs to
        stdout or stderr. [Astal.Process](https://aylur.github.io/libastal/io/class.Process.html) has a `stdout` and `stderr` signal.

        ```lua
        ---@param commandline string | string[]
        ---@param on_stdout? fun(out: string): nil
        ---@param on_stderr? fun(err: string): nil
        ---@return Astal.Process | nil
        local function subprocess(commandline, on_stdout, on_stderr) end
        ```

        Example:

        ```lua
        local proc = subprocess(
            "some-command",
            function(out) print(out) end,
            function(err) print(err) end,
        )

        -- with signals
        local proc = subprocess("some-command")

        proc.on_stdout = function(_, stdout)
            print(stdout)
        end

        proc.on_stderr = function(_, stderr)
            print(stderr)
        end
        ```
      metadata: {}
    - page_content: |-
        ### Executing external commands and scripts

        ```lua
        ---@param commandline string | string[]
        ---@return string, string
        local function exec(commandline) end

        ---@param commandline string | string[]
        ---@param callback? fun(out: string, err: string): nil
        local function exec_async(commandline, callback) end
        ```

        Example:

        ```lua
        local out, err = exec("/path/to/script")

        if err ~= nil then
            print(err)
        else
            print(out)
        end

        exec_async({ "bash", "-c", "/path/to/script.sh" }, function(out, err)
            if err ~= nil then
                print(err)
            else
                print(out)
            end
        end)
        ```

        :::warning
        `subprocess`, `exec`, and `exec_async` executes the passed executable as is.
        They are **not** executed in a shell environment,
        they do **not** expand ENV variables like `$HOME`,
        and they do **not** handle logical operators like `&&` and `||`.

        If you want bash, run them with bash.

        ```lua
        exec({ "bash", "-c", "command $VAR && command" })
        exec("bash -c 'command $VAR' && command")
        ```

        :::
      metadata: {}
  28:
    hash: ab6e206a0fcd1f4dc1c9b50ac9c46fe365f5e32d52f859fe7ceed423abaa92e3
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/lua/widget.md
    documents:
    - page_content: '# Widget'
      metadata: {}
    - page_content: |-
        ## Gtk3

        ### Additional widget properties

        These are properties that Astal additionally adds to Gtk.Widgets

        - class_name: `string` - List of class CSS selectors separated by white space.
        - css: `string` - Inline CSS. e.g `label { color: white; }`. If no selector is specified `*` will be assumed. e.g `color: white;` will be inferred as `* { color: white; }`.
        - cursor: `string` - Cursor style when hovering over widgets that have hover states, e.g it won't work on labels. [list of valid values](https://docs.gtk.org/gdk3/ctor.Cursor.new_from_name.html).
        - click_through: `boolean` - Lets click events through.

        To have a full list of available properties, reference the documentation of the widget.

        - [Astal3 widgets](https://aylur.github.io/libastal/astal3/index.html#classes)
        - [Gtk widgets](https://docs.gtk.org/gtk3/#classes)
      metadata: {}
    - page_content: |-
        ### Additional widget methods

        #### setup

        `setup` is a convenience prop to remove the need to predefine widgets
        before returning them in cases where a reference is needed.

        without `setup`

        ```lua
        local function MyWidget()
            local button = Widget.Button()
            -- setup button
            return button
        end
        ```

        using `setup`

        ```lua
        local function MyWidget()
            return Widget.Button({
                setup = function(self)
                    -- setup button
                end,
            })
        end
        ```

        #### hook

        Shorthand for connecting and disconnecting to [Subscribable and Connectable](./binding#subscribable-and-connectable-interface) objects.

        without `hook`

        ```lua
        local function MyWidget()
            local id = gobject.on_signal:connect(callback)
            local unsub = variable:subscribe(callback)

            return Widget.Box({
                on_destroy = function()
                    GObject.signal_handler_disconnect(gobject, id)
                    unsub()
                end,
            })
        end
        ```

        with `hook`

        ```lua
        local function MyWidget()
            return Widget.Box({
                setup = function(self)
                    self:hook(gobject, "signal", callback)
                    self:hook(variable, callback)
                end,
            })
        end
        ```

        #### toggle_class_name

        Toggle class names based on a condition.

        ```lua
        local function MyWidget()
            return Widget.Box({
                setup = function(self)
                    self:toggle_class_name("classname", some_condition)
                end,
            })
        end
        ```
      metadata: {}
    - page_content: |-
        ### How to use non builtin Gtk widgets

        Using the `astalify` function you can wrap widgets
        to behave like builtin widgets.
        It will apply the following:

        - set `visible` to true by default (Gtk3 widgets are invisible by default)
        - make gobject properties accept and consume `Binding` objects
        - add properties and methods listed above

        ```lua
        local astal = require("astal.gtk3")
        local astalify = astal.astalify
        local Gtk = astal.Gtk
        local Gdk = astal.Gdk

        local ColorButton = astalify(Gtk.ColorButton)

        local function MyWidget()
            return ColorButton({
                setup = function(self)
                    -- setup ColorButton instance
                end,
                use_alpha = true,
                rgba = Gdk.RGBA({
                    red = 1,
                    green = 0,
                    blue = 0,
                    alpha = 0.5,
                }),
                on_color_set = function(self)
                    print(self.rgba:to_string())
                end
            })
        end
        ```
      metadata: {}
    - page_content: |-
        ### Builtin Widgets

        You can check the [source code](https://github.com/Aylur/astal/blob/main/lang/lua/astal/gtk3/widget.lua) to have a full list of builtin widgets.

        These widgets are available by default in Lua.
      metadata: {}
    - page_content: |-
        These widgets are available by default in Lua.

        - Box: [Astal.Box](https://aylur.github.io/libastal/astal3/class.Box.html)
        - Button: [Astal.Button](https://aylur.github.io/libastal/astal3/class.Button.html)
        - CenterBox: [Astal.CenterBox](https://aylur.github.io/libastal/astal3/class.CenterBox.html)
        - CircularProgress: [Astal.CircularProgress](https://aylur.github.io/libastal/astal3/class.CircularProgress.html)
        - DrawingArea: [Gtk.DrawingArea](https://docs.gtk.org/gtk3/class.DrawingArea.html)
        - Entry: [Gtk.Entry](https://docs.gtk.org/gtk3/class.Entry.html)
        - Eventbox: [Astal.EventBox](https://aylur.github.io/libastal/astal3/class.EventBox.html)
        - Icon: [Astal.Icon](https://aylur.github.io/libastal/astal3/class.Icon.html)
        - Label: [Astal.Label](https://aylur.github.io/libastal/astal3/class.Label.html)
        - Levelbar: [Astal.LevelBar](https://aylur.github.io/libastal/astal3/class.LevelBar.html)
        - Overlay: [Astal.Overlay](https://aylur.github.io/libastal/astal3/class.Overlay.html)
        - Revealer: [Gtk.Revealer](https://docs.gtk.org/gtk3/class.Revealer.html)
        - Scrollable: [Astal.Scrollable](https://aylur.github.io/libastal/astal3/class.Scrollable.html)
        - Slider: [Astal.Slider](https://aylur.github.io/libastal/astal3/class.Slider.html)
        - Stack: [Astal.Stack](https://aylur.github.io/libastal/astal3/class.Stack.html)
        - Switch: [Gtk.Switch](https://docs.gtk.org/gtk3/class.Switch.html)
        - Window: [Astal.Window](https://aylur.github.io/libastal/astal3/class.Window.html)
      metadata: {}
    - page_content: |-
        ## Gtk4

        🚧 Work in Progress 🚧
      metadata: {}
  29:
    hash: 10942ba424febd75c733c34fae265ec4d8959eb43fecc838933638d806146d6e
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/binding.md
    documents:
    - page_content: |-
        # Binding

        As mentioned before binding an object's state to another -
        so in most cases a `Variable` or a `GObject.Object` property to a widget's property -
        is done through the `bind` function which returns a `Binding` object.

        `Binding` objects simply hold information about the source and how it should be transformed
        which Widget constructors can use to setup a connection between themselves and the source.

        ```ts
        class Binding<Value> {
            private transformFn: (v: any) => unknown
            private emitter: Subscribable<Value> | Connectable
            private prop?: string

            as<T>(fn: (v: Value) => T): Binding<T>
            get(): Value
            subscribe(callback: (value: Value) => void): () => void
        }
        ```

        A `Binding` can be constructed from an object implementing
        the `Subscribable` interface (usually a `Variable`)
        or an object implementing the `Connectable` interface and one of its properties
        (usually a `GObject.Object` instance).

        ```ts
        function bind<T>(obj: Subscribable<T>): Binding<T>

        function bind<
            Obj extends Connectable,
            Prop extends keyof Obj,
        >(obj: Obj, prop: Prop): Binding<Obj[Prop]>
        ```

        ## Subscribable and Connectable interface

        Any object implementing one of these interfaces can be used with `bind`.

        ```ts
        interface Subscribable<T> {
            subscribe(callback: (value: T) => void): () => void
            get(): T
        }

        interface Connectable {
            connect(signal: string, callback: (...args: any[]) => unknown): number
            disconnect(id: number): void
        }
        ```
      metadata: {}
    - page_content: |-
        ## Example Custom Subscribable

        When binding the children of a box from an array, usually not all elements
        of the array changes each time, so it would make sense to not destroy
        the widget which represents the element.

        ::: code-group

        ```ts :line-numbers [varmap.ts]
        import { type Subscribable } from "astal/binding"
        import { Gtk } from "astal"

        export class VarMap<K, T = Gtk.Widget> implements Subscribable {
            #subs = new Set<(v: Array<[K, T]>) => void>()
            #map: Map<K, T>

            #notifiy() {
                const value = this.get()
                for (const sub of this.#subs) {
                    sub(value)
                }
            }

            #delete(key: K) {
                const v = this.#map.get(key)

                if (v instanceof Gtk.Widget) {
                    v.destroy()
                }

                this.#map.delete(key)
            }

            constructor(initial?: Iterable<[K, T]>) {
                this.#map = new Map(initial)
            }

            set(key: K, value: T) {
                this.#delete(key)
                this.#map.set(key, value)
                this.#notifiy()
            }

            delete(key: K) {
                this.#delete(key)
                this.#notifiy()
            }

            get() {
                return [...this.#map.entries()]
            }

            subscribe(callback: (v: Array<[K, T]>) => void) {
                this.#subs.add(callback)
                return () => this.#subs.delete(callback)
            }
        }
      metadata: {}
    - page_content: |-
        ```

        :::

        And this `VarMap<key, Widget>` can be used as an alternative to `Variable<Array<Widget>>`.

        ```tsx
        function MappedBox() {
            const map = new VarMap([
                [1, <MyWidget id={id} />]
                [2, <MyWidget id={id} />]
            ])

            const conns = [
                gobject.connect("added", (_, id) => map.set(id, MyWidget({ id }))),
                gobject.connect("removed", (_, id) => map.delete(id, MyWidget({ id }))),
            ]

            return <box onDestroy={() => conns.map(id => gobject.disconnect(id))}>
                {bind(map).as(arr => arr.sort(([a], [b]) => a - b).map(([,w]) => w))}
            </box>
        }
        ```
      metadata: {}
    - page_content: |-
        ## Example Custom Connectable

        Astal provides [decorator functions](./gobject#example-usage)
        that make it easy to subclass gobjects, however
        you can read more about GObjects and subclassing
        on [gjs.guide](https://gjs.guide/guides/gobject/subclassing.html#gobject-subclassing).

        Objects coming from [libraries](../libraries/references#astal-libraries)
        usually have a singleton gobject you can access with `.get_default()`.

        Here is an example of a Brightness library by wrapping the `brightnessctl` cli utility
        and by monitoring `/sys/class/backlight`

        ::: code-group

        ```ts :line-numbers [brightness.ts]
        import GObject, { register, property } from "astal/gobject"
        import { monitorFile, readFileAsync } from "astal/file"
        import { exec, execAsync } from "astal/process"

        const get = (args: string) => Number(exec(`brightnessctl ${args}`))
        const screen = exec(`bash -c "ls -w1 /sys/class/backlight | head -1"`)
        const kbd = exec(`bash -c "ls -w1 /sys/class/leds | head -1"`)

        @register({ GTypeName: "Brightness" })
        export default class Brightness extends GObject.Object {
            static instance: Brightness
            static get_default() {
                if (!this.instance)
                    this.instance = new Brightness()

                return this.instance
            }

            #kbdMax = get(`--device ${kbd} max`)
            #kbd = get(`--device ${kbd} get`)
            #screenMax = get("max")
            #screen = get("get") / (get("max") || 1)

            @property(Number)
            get kbd() { return this.#kbd }
      metadata: {}
    - page_content: |-
        @property(Number)
            get kbd() { return this.#kbd }

            set kbd(value) {
                if (value < 0 || value > this.#kbdMax)
                    return

                execAsync(`brightnessctl -d ${kbd} s ${value} -q`).then(() => {
                    this.#kbd = value
                    this.notify("kbd")
                })
            }

            @property(Number)
            get screen() { return this.#screen }

            set screen(percent) {
                if (percent < 0)
                    percent = 0

                if (percent > 1)
                    percent = 1

                execAsync(`brightnessctl set ${Math.floor(percent * 100)}% -q`).then(() => {
                    this.#screen = percent
                    this.notify("screen")
                })
            }

            constructor() {
                super()

                const screenPath = `/sys/class/backlight/${screen}/brightness`
                const kbdPath = `/sys/class/leds/${kbd}/brightness`

                monitorFile(screenPath, async f => {
                    const v = await readFileAsync(f)
                    this.#screen = Number(v) / this.#screenMax
                    this.notify("screen")
                })

                monitorFile(kbdPath, async f => {
                    const v = await readFileAsync(f)
                    this.#kbd = Number(v) / this.#kbdMax
                    this.notify("kbd")
                })
            }
        }
      metadata: {}
    - page_content: |-
        ```

        :::

        And it can be used like any other library object.

        ```tsx
        function BrightnessSlider() {
            const brightness = Brightness.get_default()

            return <slider
                value={bind(brightness, "screen")}
                onDragged={({ value }) => brightness.screen = value}
            />
        }
        ```
      metadata: {}
  30:
    hash: 212382b6cefe48d75abdf631fff5f773fdfe8dbfff19ed6107a9a9c1ffb2d995
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/examples.md
    documents:
    - page_content: |-
        # TypeScript Examples

        ## Gtk3

        ### [Simple Bar](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/simple-bar)
        ![simple-bar](https://github.com/user-attachments/assets/a306c864-56b7-44c4-8820-81f424f32b9b)

        ### [Notification Popups](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/notifications)
        ![notification-popups](https://github.com/user-attachments/assets/0df0eddc-5c74-4af0-a694-48dc8ec6bb44)
        ### [Applauncher](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/applauncher)
        ![launcher](https://github.com/user-attachments/assets/2695e3bb-dff4-478a-b392-279fe638bfd3)

        ### [Media Player](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/media-player)
        ![media-player](https://github.com/user-attachments/assets/891e9706-74db-4505-bd83-c3628d7b4fd0)

        ### [OSD](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/osd)
        ![osd](https://github.com/user-attachments/assets/08e0e118-6b07-4cac-8ebc-08262594cee7)
      metadata: {}
  31:
    hash: e74dee1fd361ad7c2e4960655b23e5e0f4693b5a6b3c0b667e9cdb3eb7dbdc0e
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/cli-app.md
    documents:
    - page_content: |-
        # CLI and App

        `App` is a singleton **instance** of an [Astal.Application](https://aylur.github.io/libastal/astal3/class.Application.html).

        Depending on gtk version import paths will differ

        ```ts
        import { App } from "astal/gtk3"
        import { App } from "astal/gtk4"
        ```

        ## Entry point

        :::code-group

        ```ts [app.ts]
        App.start({
            main() {
                // setup anything
                // instantiate widgets
            },
        })
        ```

        :::

        ## Instance identifier

        You can run multiple instances by defining a unique instance name.

        ```ts
        App.start({
            instanceName: "my-instance", // defaults to "astal"
            main() { },
        })
        ```
      metadata: {}
    - page_content: |-
        ## Messaging from CLI

        If you want to interact with an instance from the CLI,
        you can do so by sending a message.

        ```ts
        App.start({
            requestHandler(request: string, res: (response: any) => void) {
                if (request == "say hi") {
                    return res("hi cli")
                }
                res("unknown command")
            },
            main() { },
        })
        ```

        ```sh
        astal say hi
        # hi cli
        ```

        If you want to run arbitrary JavaScript from CLI, you can use `App.eval`
        which will evaluate the passed string as the body of an `async` function.

        ```ts
        App.start({
            main() {},
            requestHandler(js, res) {
                App.eval(js).then(res).catch(res)
            },
        })
        ```

        If the string does not contain a semicolon, a single expression is assumed and returned implicity.

        ```sh
        astal "'hello'"
        # hello
        ```

        If the string contains a semicolon, you have to return explicitly

        ```sh
        astal "'hello';"
        # undefined

        astal "return 'hello';"
        # hello
        ```
      metadata: {}
    - page_content: |-
        ## Toggling Windows by their name

        In order for Astal to know about your windows, you have to register them.
        You can do this by specifying a **unique** `name` and calling `App.add_window`

        ```tsx {4}
        import { App } from "astal/gtk3"

        function Bar() {
            return <window name="Bar" setup={self => App.add_window(self)}>
                <box />
            </window>
        }
        ```

        You can also invoke `App.add_window` by simply passing the `App` to the `application` prop.

        ```tsx {4}
        import { App } from "astal/gtk3"

        function Bar() {
            return <window name="Bar" application={App}>
                <box />
            </window>
        }
        ```

        :::warning
        When assigning the `application` prop make sure `name` comes before.
        Props are set sequentially and if name is applied after application it won't work.
        :::

        ```sh [astal]
        astal -t Bar
        ```

        ## Client

        The first time you execute your script the `main` function gets called.
        While that instance is running any subsequent execution of the script will call
        the `client` function.

        :::code-group

        ```ts [main.ts]
        App.start({
            // main instance
            main(...args: Array<string>) {
                print(...args)
            },

            // every subsequent calls
            client(message: (msg: string) => string, ...args: Array<string>) {
                const res = message("you can message the main instance")
                print(res)
            },

            // this runs in the main instance
            requestHandler(request: string, res: (response: any) => void) {
                res("response from main")
            },
        })
        ```

        :::
      metadata: {}
  32:
    hash: 64105c7ba4a236e2737b78ffe16ecd0d553bffa8cfe98d9f7df03a5afc6d5c9f
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/gobject.md
    documents:
    - page_content: |-
        # Subclassing GObject.Object

        Astal provides decorator functions that make it easy to subclass gobjects.

        ## Example Usage

        ```ts
        import GObject, { register, property } from "astal/gobject"

        @register()
        class MyObj extends GObject.Object {
            @property(String)
            declare myProp: string

            @signal(String, Number)
            declare mySignal: (a: string, b: number) => void
        }
        ```
      metadata: {}
    - page_content: |-
        ## Property decorator

        ```ts
        type PropertyDeclaration =
            | GObject.ParamSpec
            | { $gtype: GObject.GType }

        function property(declaration: PropertyDeclaration)
        ```

        The `property` decorator can take any class that has a registered GType.
        This includes the globally available `String`, `Number`, `Boolean` and `Object`
        javascript constructors. They are mapped to their relative `GObject.ParamSpec`.

        The property decorator can be applied in the following ways:

        1. On a property declaration

        ```ts {3,4}
        @register()
        class MyObj extends GObject.Object {
            @property(String)
            declare myProp: string
        }
        ```

        This will create a getter and setter for the property and will also
        emit the notify signal when the value is set to a new value.

        :::info
        The `declare` keyword is required so that the property declaration
        is not transpiled into JavaScript, otherwise the initial value of the
        property would be `undefined`.
        :::

        :::warning
        The value is checked by reference, this is important if your
        property is an object type.

        ```ts
        const dict = obj.prop
        dict["key"] = 0
        obj.prop = dict // This will not emit notify::prop // [!code error]
        obj.prop = { ...dict } // This will emit notify::prop
        ```

        :::

        If you want to set a custom default value, do so in the constructor of your class.

        ```ts {7}
        @register()
        class MyObj extends GObject.Object {
            @property(String)
            declare myProp: string

            constructor() {
                super({ myProp: "default-value" } as any)
            }
        }
      metadata: {}
    - page_content: |-
        ```

        2. On a getter

        ```ts {3,4}
        @register()
        class MyObj extends GObject.Object {
            @property(String)
            get myProp () {
                return "value"
            }
        }
        ```

        This will create a read-only property.

        3. On a getter and setter

        ```ts {5,6,10}
        @register()
        class MyObj extends GObject.Object {
            declare private _prop: string

            @property(String)
            get myProp () {
                return "value"
            }

            set myProp (v: string) {
                if (v !== this._prop) {
                    this._prop = v
                    this.notify("my-prop")
                }
            }
        }
        ```

        This will create a read-write property.

        :::info
        When defining getter/setters for the property, notify signal emission has to be done explicitly.
        :::
      metadata: {}
    - page_content: |-
        ## Signal decorator

        ```ts
        function signal(...params: Array<{ $gtype: GObject.GType })

        function signal(declaration?: SignalDeclaration) // Object you would pass to GObject.registerClass
        ```

        You can apply the signal decorator to either a property declaration or a method.

        ```ts {3,4,6,7}
        @register()
        class MyObj extends GObject.Object {
            @signal(String, String)
            declare mySig: (a: String, b: String) => void

            @signal(String, String)
            mySig(a: string, b: string) {
                // default signal handler
            }
        }
        ```

        You can emit the signal by calling the signal method or using `emit`.

        ```ts
        const obj = new MyObj()
        obj.connect("my-sig", (obj, a: string, b: string) => {})

        obj.mySig("a", "b")
        obj.emit("my-sig", "a", "b")
        ```

        ## Register decorator

        Every GObject subclass has to be registered. You can pass the same options
        to this decorator as you would to `GObject.registerClass`

        ```ts
        @register({ GTypeName: "MyObj" })
        class MyObj extends GObject.Object {
        }
        ```
      metadata: {}
  33:
    hash: d96b57bb025b218549d597af5dc80d3322dec3e35ba094b06747763c8b3d48d9
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/faq.md
    documents:
    - page_content: |-
        # Frequently asked question, common issues, tips and tricks

        ## Monitor id does not match compositor

        The monitor id property that windows expect is mapped by Gdk, which is not always
        the same as the compositor. Instead use the `gdkmonitor` property which expects
        a `Gdk.Monitor` object.

        ```tsx
        import { App } from "astal/gtk3"

        function Bar(gdkmonitor) {
            return <window gdkmonitor={gdkmonitor} />
        }

        function main() {
            for (const monitor of App.get_monitors()) {
                if (monitor.model == "your-desired-model") {
                    Bar(monitor)
                }
            }
        }

        App.start({ main })
        ```

        ## Environment variables

        JavaScript is **not** an bash.

        ```ts
        const HOME = exec("echo $HOME") // does not work
        ```

        `exec` and `execAsync` runs the passed program as is, its **not** run in a
        shell environment, so the above example just passes `$HOME` as a string literal
        to the `echo` program.

        :::danger Please don't do this
        You could pass it to bash, but that is a horrible approach.

        ```ts
        const HOME = exec("bash -c 'echo $HOME'")
        ```

        :::

        You can read environment variables with [GLib.getenv](https://gjs-docs.gnome.org/glib20~2.0/glib.getenv).

        ```ts
        import GLib from "gi://GLib"

        const HOME = GLib.getenv("HOME")
        ```
      metadata: {}
    - page_content: |-
        ## Custom SVG symbolic icons

        Put the svgs in a directory, name them `<icon-name>-symbolic.svg`
        and use `App.add_icons` or `icons` parameter in `App.start`

        :::code-group

        ```ts [app.ts]
        App.start({
            icons: `/path/to/icons`, // this dir should include custom-symbolic.svg
            main() {
                Widget.Icon({
                    icon: "custom-symbolic", // custom-symbolic.svg
                    css: "color: green;", // can be colored, like other named icons
                })
            },
        })
        ```

        :::

        :::info
        If there is a name clash with an icon from your current icon pack
        the icon pack will take precedence
        :::

        ## Logging

        The `console` API in gjs uses glib logging functions.
        If you just want to print some text as is to stdout
        use the globally available `print` function or `printerr` for stderr.

        ```ts
        print("print this line to stdout")
        printerr("print this line to stderr")
        ```
      metadata: {}
    - page_content: |-
        ## Populate the global scope with frequently accessed variables

        It might be annoying to always import Gtk only for the `Gtk.Align` enum.

        :::code-group

        ```ts [globals.ts]
        import Gtk from "gi://Gtk"

        declare global {
            const START: number
            const CENTER: number
            const END: number
            const FILL: number
        }

        Object.assign(globalThis, {
            START: Gtk.Align.START,
            CENTER: Gtk.Align.CENTER,
            END: Gtk.Align.END,
            FILL: Gtk.Align.FILL,
        })
        ```

        :::

        :::code-group

        ```tsx [Bar.tsx] {3}
        export default function Bar() {
            return <window>
                <box halign={START} />
            </window>
        }
        ```

        :::

        :::code-group

        ```ts [app.ts]
        import "./globals" // don't forget to import it first // [!code ++]
        import Bar from "./Bar"

        App.start({
            main() {
                Bar()
            }
        })
        ```

        :::

        :::info
        It is considered bad practice to populate the global scope, but its your code, not a public library.
        :::
      metadata: {}
    - page_content: |-
        ## Auto create Window for each Monitor

        To have Window widgets appear on a monitor when its plugged in, listen to `App.monitor_added`.

        :::code-group

        ```tsx [Bar.tsx]
        export default function Bar(gdkmonitor: Gdk.Monitor) {
            return <window gdkmonitor={gdkmonitor} />
        }
        ```

        :::

        :::code-group

        ```ts [app.ts]
        import { Gdk, Gtk } from "astal/gtk3"
        import Bar from "./Bar"

        function main() {
            const bars = new Map<Gdk.Monitor, Gtk.Widget>()

            // initialize
            for (const gdkmonitor of App.get_monitors()) {
                bars.set(gdkmonitor, Bar(gdkmonitor))
            }

            App.connect("monitor-added", (_, gdkmonitor) => {
                bars.set(gdkmonitor, Bar(gdkmonitor))
            })

            App.connect("monitor-removed", (_, gdkmonitor) => {
                bars.get(gdkmonitor)?.destroy()
                bars.delete(gdkmonitor)
            })
        }

        App.start({ main })
        ```

        :::

        ## Error: Can't convert non-null pointer to JS value

        These happen when accessing list type properties. Gjs fails to correctly bind
        `List` and other array like types of Vala as a property.

        ```ts
        import Notifd from "gi://AstalNotifd"
        const notifd = Notifd.get_default()

        notifd.notifications // [!code --]
        notifd.get_notifications() // [!code ++]
        ```

        :::tip
        Open up an issue/PR to add a [workaround](https://github.com/Aylur/astal/blob/main/lang/gjs/src/overrides.ts).
        :::
      metadata: {}
    - page_content: |-
        ## How to create regular floating windows

        Use `Gtk.Window` with [Widget.astalify](/guide/typescript/widget#how-to-use-non-builtin-gtk-widgets).

        By default `Gtk.Window` is destroyed on close. To prevent this add a handler for `delete-event`.

        ```tsx {4-7}
        const RegularWindow = Widget.astalify(Gtk.Window)

        return <RegularWindow
            onDeleteEvent={(self) => {
                self.hide()
                return true
            }}
        >
            {child}
        </RegularWindow>
        ```

        ## Is there a way to limit the width/height of a widget?

        Unfortunately not. You can set a minimum size with `min-width` and `min-heigth` css attributes,
        but you can not set max size.

        ## Custom widgets with bindable properties

        In function components you can wrap any primitive to handle both
        binding and value cases as one.

        ```tsx
        function MyWidget(props: { prop: string | Binding<string> }) {
            const prop = props.prop instanceof Binding
                ? props.prop
                : bind({ get: () => props.prop, subscribe: () => () => {} })

            function setup(self: Widget.Box) {
                self.hook(prop, () => {
                    const value = prop.get()
                    // handler
                })
            }

            return <box setup={setup}>
            </box>
        }
        ```

        You can pass the prop the super constructor in subclasses

        ```tsx
        @register()
        class MyWidget extends Widget.Box {
            @property(String)
            set prop(v: string) {
                // handler
            }

            constructor(props: { prop: string | Binding<string> }) {
                super(props)
            }
        }
        ```
      metadata: {}
    - page_content: |-
        ## How do I register keybindings?

        If you want global keybindings use your compositor.
        Only **focused** windows can capture events. To make a window
        focusable set its keymode.

        ::: code-group
        ```tsx [gtk3]
        <window
            keymode={Astal.Keymode.ON_DEMAND}
            onKeyPressEvent={(self, event: Gdk.Event) => {
                if (event.get_keyval()[1] === Gdk.KEY_Escape) {
                    self.hide()
                }
            }}
        />
        ```

        ```tsx [gtk4]
        <window
            keymode={Astal.Keymode.ON_DEMAND}
            onKeyPressed={(self, keyval) => {
                if (keyval === Gdk.KEY_Escape) {
                    self.hide()
                }
            }}
        />
        ```
        :::

        ## How to create a Popup

        In Gtk4 simply use Gtk's builtin [Popover](https://docs.gtk.org/gtk4/class.Popover.html).

        In Gtk3 you can create an [Astal.Window](https://aylur.github.io/libastal/astal3/class.Window.html) and handle click events.

        Checkout [examples/gtk3/js/popover](https://github.com/Aylur/astal/tree/main/examples/gtk3/js/popover)
      metadata: {}
  34:
    hash: bb58b925f350ef13363910a3846a440ee4d9f88205d8bb27c143e1aa52a3e49f
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/first-widgets.md
    documents:
    - page_content: |-
        # First Widgets

        ## Getting Started

        Start by importing the singleton
        [Astal.Application](https://aylur.github.io/libastal/astal3/class.Application.html) instance.

        :::code-group

        ```ts [app.ts]
        import { App } from "astal/gtk3"

        App.start({
            main() {
                // you will instantiate Widgets here
                // and setup anything else if you need
            }
        })
        ```

        :::

        After your [bundle step](./installation.md) run `gjs -m app.js`, and that's it!
        Now you have an Astal instance running written in TypeScript.

        ## Root of every shell component: Window

        Astal apps are composed of widgets. A widget is a piece of UI that has its own logic and style.
        A widget can be as small as a button or an entire bar.
        The top level widget is always a [Window](https://aylur.github.io/libastal/astal3/class.Window.html) which will hold all widgets.

        ::: code-group

        ```tsx [widget/Bar.tsx]
        function Bar(monitor = 0) {
            return <window className="Bar" monitor={monitor}>
                <box>Content of the widget</box>
            </window>
        }
        ```

        :::

        ::: code-group

        ```ts [app.ts]
        import Bar from "./widget/Bar"

        App.start({
            main() {
                Bar(0)
                Bar(1) // instantiate for each monitor
            },
        })
        ```

        :::
      metadata: {}
    - page_content: |-
        ## Creating and nesting widgets

        Widgets are JavaScript functions which return Gtk widgets,
        either by using JSX or using a widget constructor.

        :::code-group

        ```tsx [MyButton.tsx]
        function MyButton(): JSX.Element {
            return <button onClicked="echo hello">
                <label label="Click me!" />
            </button>
        }
        ```

        ```ts [MyButton.ts (gtk3)]
        import { Widget } from "astal/gtk3"

        function MyButton(): Widget.Button {
            return new Widget.Button(
                { onClicked: "echo hello" },
                new Widget.Label({ label: "Click me!" }),
            )
        }
        ```

        ```ts [MyButton.ts (gtk4)]
        import { Widget } from "astal/gtk4"

        function MyButton(): Widget.Button {
            return Widget.Button(
                { onClicked: "echo hello" },
                Widget.Label({ label: "Click me!" }),
            )
        }
        ```

        :::

        :::info
        The only difference between the two is the return type.
        Using markup the return type is always `Gtk.Widget` (globally available as `JSX.Element`),
        while using constructors the return type is the actual type of the widget.
        It is rare to need the actual return type, so most if not all of the time, you can use markup.
        :::

        Now that you have declared `MyButton`, you can nest it into another component.

        ```tsx
        function MyBar() {
            return <window>
                <box>
                    Click The button
                    <MyButton />
                </box>
            </window>
        }
        ```

        Notice that widgets you defined start with a capital letter `<MyButton />`.
        Lowercase tags are builtin widgets, while capital letter is for custom widgets.
      metadata: {}
    - page_content: |-
        ## Displaying Data

        JSX lets you put markup into JavaScript.
        Curly braces let you “escape back” into JavaScript so that you can embed some variable
        from your code and display it.

        ```tsx
        function MyWidget() {
            const label = "hello"

            return <button>{label}</button>
        }
        ```

        You can also pass JavaScript to markup attributes

        ```tsx
        function MyWidget() {
            const label = "hello"

            return <button label={label} />
        }
        ```

        ## Conditional Rendering

        You can use the same techniques as you use when writing regular JavaScript code.
        For example, you can use an if statement to conditionally include JSX:

        ```tsx
        function MyWidget() {
            let content

            if (condition) {
                content = <True />
            } else {
                content = <False />
            }

            return <box>{content}</box>
        }
        ```

        You can also inline a [conditional `?`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator) (ternary) expression.

        ```tsx
        function MyWidget() {
            return <box>{condition ? <True /> : <False />}</box>
        }
        ```

        When you don’t need the `else` branch, you can also use a shorter [logical && syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):

        ```tsx
        function MyWidget() {
            return <box>{condition && <True />}</box>
        }
        ```

        :::info
        As you can guess from the above snippet, [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) values are not rendered.
        :::
      metadata: {}
    - page_content: |-
        ## Rendering lists

        You can use [`for` loops](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) or [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).

        ```tsx
        function MyWidget() {
            const labels = [
                "label1"
                "label2"
                "label3"
            ]

            return <box>
                {labels.map(label => (
                    <label label={label} />
                ))}
            </box>
        }
        ```

        ## Widget signal handlers

        You can respond to events by declaring event handler functions inside your widget:

        ```tsx
        function MyButton() {
            function onClicked(self: Widget.Button, ...args) {
                console.log(self, "was clicked")
            }

            return <button onClicked={onClicked} />
        }
        ```

        The handler can also be a string, which will get executed in a subprocess asynchronously.

        ```tsx
        function MyButton() {
            return <button onClicked="echo hello" />
        }
        ```

        :::info
        Attributes prefixed with `on` will connect to a `signal` of the widget.
        Their types are not generated, but written by hand, which means not all of them are typed.
        Refer to the Gtk and Astal docs to have a full list of them.
        :::

        :::info
        Attributes prefixed with `onNotify` will connect to a `notify::` signal of the widget.

        ```tsx
        <switch onNotifyActive={self => print("switched to", self.active)}>
        ```
        :::
      metadata: {}
    - page_content: |-
        ## How properties are passed

        Using JSX, a custom widget will always have a single object as its parameter.

        ```ts
        type Props = {
            myprop: string
            child?: JSX.Element // when only one child is passed
            children?: Array<JSX.Element> // when multiple children are passed
        }

        function MyWidget({ myprop, child, children }: Props) {
            //
        }
        ```

        ```tsx
        // child prop of MyWidget is the box
        return <MyWidget myprop="hello">
            <box />
        </MyWidget>
        ```

        ```tsx
        // children prop of MyWidget is [box, box, box]
        return <MyWidget myprop="hello">
            <box />
            <box />
            <box />
        </MyWidget>
        ```
      metadata: {}
    - page_content: |-
        ## State management

        The state of widgets are handled with Bindings. A [Binding](./binding) lets you
        connect the state of an [object](./binding#subscribable-and-connectable-interface)
        to a widget so it re-renders when that state changes.

        Use the `bind` function to create a `Binding` object from a `Variable` or
        a regular `GObject` and one of its properties.

        Here is an example of a Counter widget that uses a `Variable` as its state:

        ```tsx
        import { Variable, bind } from "astal"

        function Counter() {
            const count = Variable(0)

            function increment() {
                count.set(count.get() + 1)
            }

            return <box>
                <label label={bind(count).as(num => num.toString())} />
                <button onClicked={increment}>
                    Click to increment
                </button>
            </box>
        }
        ```

        :::info
        Bindings have an `.as()` method which lets you transform the assigned value.
        In the case of a Label, its label property expects a string, so it needs to be
        turned to a string first.
        :::

        :::tip
        `Variables` have a shorthand for `bind(variable).as(transform)`

        ```tsx
        const v = Variable(0)
        const transform = (v) => v.toString()

        return <box>
            {/* these two are equivalent */}
            <label label={bind(v).as(transform)} />
            <label label={v(transform)} />
        </box>
      metadata: {}
    - page_content: |-
        ```

        :::

        Here is an example of a battery percent label that binds the `percentage`
        property of the Battery object from the [Battery Library](/guide/libraries/battery):

        ```tsx
        import Battery from "gi://AstalBattery"
        import { bind } from "astal"

        function BatteryPercentage() {
            const bat = Battery.get_default()

            return <label label={bind(bat, "percentage").as((p) => p * 100 + " %")} />
        }
        ```
      metadata: {}
    - page_content: |-
        ## Dynamic children

        You can also use a `Binding` for `child` and `children` properties.

        ```tsx
        const child = Variable(<box />)

        return <box>{child}</box>
        ```

        ```tsx
        const num = Variable(3)
        const range = (n) => [...Array(n).keys()]

        return <box>
            {num(n => range(n).map(i => (
                <button>
                    {i.toString()}
                </button>
            )))}
        </box>
      metadata: {}
    - page_content: |-
        ```

        :::tip
        Binding children of widgets will implicitly call `.destroy()` on widgets
        that would be left without a parent. You can opt out of this behavior
        by setting `noImplicityDestroy` property on the container widget.
        :::

        :::info
        The above example destroys and recreates every widget in the list **every time**
        the value of the `Variable` changes. There might be cases where you would
        want to handle child creation and deletion
        yourself, because you don't want to lose the
        inner state of widgets that does not need to be recreated. In this case
        you can create a [custom reactive structure](./binding#example-custom-subscribable)
        :::

        # How children are passed

        Here is full list of how children and bound children can be passed to custom widgets.

        ```tsx
        import Binding from "astal/binding"

        function Parent(props: {
            child?: JSX.Element | Binding<JSX.Element> | Binding<Array<JSX.Element>>
            children?: Array<JSX.Element> | Binding<Array<JSX.Element>>
        })

        // { child: JSX.Element }
        <Parent>
            <child />
        </Parent>

        // { children: Array<JSX.Element> }
        <Parent>
            <child />
            <child />
        </Parent>

        // { child: Binding<JSX.Element> }
        <Parent>
            {variable(c => (
                <child />
            ))}
        </Parent>

        // { child: Binding<Array<JSX.Element>> }
        <Parent>
            {variable(c => (
                <child />
                <child />
            ))}
        </Parent>

        // { children: Binding<Array<JSX.Element>> }
        <Parent>
            <child />
            {variable(c => (
                <child />
            ))}
        </Parent>
      metadata: {}
    - page_content: |-
        // { children: Binding<Array<JSX.Element>> }
        <Parent>
            <child />
            {variable(c => (
                <child />
                <child />
            ))}
        </Parent>
      metadata: {}
    - page_content: |-
        ```

        :::tip
        If you have a widget where you pass widgets in various ways, you can
        wrap `child` and `children` props in a [`Subscribable`](./faq#custom-widgets-with-bindable-properties) and handle all cases as if they were bindings.
        :::

        :::info
        You can pass the followings as children:

        - widgets
        - deeply nested arrays of widgets
        - bindings of widgets
        - bindings of deeply nested arrays of widgets

        [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) values are not rendered and anything not from this list
        will be coerced into a string and rendered as a label
        :::
      metadata: {}
  35:
    hash: f44f6d9a42cad7d451e73db7b19ae0e9fcaebdd600855d530b1502dd7f2c38df
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/installation.md
    documents:
    - page_content: |-
        # Installation

        It is recommended to use [AGS](https://aylur.github.io/ags/)
        to scaffold and run projects in TypeScript.

        It lets you

        - generate TypeScript types using [ts-for-gir](https://github.com/gjsify/ts-for-gir)
        - generate a tsconfig which is used by LSPs to provide intellisense
        - bundle your TypeScript and JavaScript code using [esbuild](https://esbuild.github.io/)

        :::details Trivia
        AGS is the predecessor of Astal, which was written purely in TypeScript and so only supported
        JavaScript/TypeScript. Now it serves as a scaffolding tool for Astal+TypeScript projects.
        :::

        ## Setting up a project

        🚧 Setting up a dev environment without AGS is not yet documented. 🚧
      metadata: {}
  36:
    hash: 532b69e1ac26cbd2e4ac9d5a1fb92d63530861868f9b5d3e973f719eb93b7dd6
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/variable.md
    documents:
    - page_content: |-
        # Variable

        ```js
        import { Variable } from "astal"
        ```

        Variable is just a simple object which holds a single value.
        It also has some shortcuts for hooking up subprocesses, intervals and other gobjects.

        :::info
        The `Variable` object imported from the `"astal"` package is **not** [Astal.Variable](https://aylur.github.io/libastal/io/class.Variable.html).
        :::

        ## Example Usage

        ```typescript
        const myvar = Variable("initial-value")

        // whenever its value changes, callback will be executed
        myvar.subscribe((value: string) => {
            console.log(value)
        })

        // settings its value
        myvar.set("new value")

        // getting its value
        const value = myvar.get()

        // binding them to widgets
        Widget.Label({
            label: bind(myvar).as((value) => `transformed ${value}`),
            label: myvar((value) => `transformed ${value}`), // shorthand for the above
        })
        ```

        :::warning
        Make sure to the transform functions you pass to `:as()` are pure.
        The `.get()` function can be called anytime by `astal` especially when `deriving`,
        so make sure there are no sideeffects.
        :::
      metadata: {}
    - page_content: |-
        ## Variable Composition

        Using `Variable.derive` any `Subscribable` object can be composed.

        ```typescript
        const v1: Variable<number> = Variable(1)
        const v2: Binding<number> = bind(obj, "prop")
        const v3: Subscribable<number> = {
            get: () => 3,
            subscribe: () => () => {},
        }

        // first argument is a list of dependencies
        // second argument is a transform function,
        // where the parameters are the values of the dependencies in the order they were passed
        const v4: Variable<number> = Variable.derive(
            [v1, v2, v3],
            (v1: number, v2: number, v3: number) => {
                return v1 * v2 * v3
            }
        )
        ```

        :::info
        The types are only for demonstration purposes, you do not have to declare
        the type of a Variable, they will be inferred from their initial value.
        :::
      metadata: {}
    - page_content: |-
        ## Subprocess shorthands

        Using `.poll` and `.watch` we can start subprocesses and capture their
        output. They can poll and watch at the same time, but they
        can only poll/watch once.

        :::warning
        The command parameter is passed to [execAsync](/guide/typescript/utilities#executing-external-commands-and-scripts)
        which means they are **not** executed in a shell environment,
        they do **not** expand ENV variables like `$HOME`,
        and they do **not** handle logical operators like `&&` and `||`.

        If you want bash, run them with bash.

        ```js
        Variable("").poll(1000, ["bash", "-c", "command $VAR && command"])
        ```

        :::

        ```typescript
        const myVar = Variable(0)
            .poll(1000, "command", (out: string, prev: number) => parseInt(out))
            .poll(1000, ["bash", "-c", "command"], (out, prev) => parseInt(out))
            .poll(1000, (prev) => prev + 1)
        ```

        ```typescript
        const myVar = Variable(0)
            .watch("command", (out: string, prev: number) => parseInt(out))
            .watch(["bash", "-c", "command"], (out, prev) => parseInt(out))
        ```

        You can temporarily stop them and restart them whenever.

        ```js
        myvar.stopWatch() // this kills the subprocess
        myvar.stopPoll()

        myvar.startListen() // launches the subprocess again
        myvar.startPoll()

        console.log(myvar.isListening())
        console.log(myvar.isPolling())
        ```
      metadata: {}
    - page_content: |-
        ## Gobject connection shorthands

        Using `.observe` you can connect gobject signals and capture their value.

        ```typescript
        const myvar = Variable("")
            .observe(obj1, "signal", () => "")
            .observe(obj2, "signal", () => "")
        ```

        ## Dispose if no longer needed

        This will stop the interval, force exit the subprocess and disconnect gobjects.

        ```js
        myVar.drop()
        ```

        :::warning
        Don't forget to drop derived variables or variables with
        either `.poll`, `.watch` or `.observe` when they are defined inside closures.

        ```tsx
        function MyWidget() {
            const myvar = Variable().poll()
            const derived = Variable.derive()

            return <box
                onDestroy={() => {
                    myvar.drop()
                    derived.drop()
                }}
            />
        }
        ```

        :::
      metadata: {}
  37:
    hash: 82ce4715a2083f84dd76de9f2df2e24484bc7c3e2aa04a0590c873d96b56890e
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/utilities.md
    documents:
    - page_content: |-
        # Utilities

        ## File functions

        Import from `astal` or `astal/file`

        ```ts
        import { readFile, readFileAsync, writeFile, writeFileAsync, monitorFile, } from "astal/file"
        ```

        ### Reading files

        ```ts
        function readFile(path: string): string
        function readFileAsync(path: string): Promise<string>
        ```

        ### Writing files

        ```ts
        function writeFile(path: string, content: string): void
        function writeFileAsync(path: string, content: string): Promise<void>
        ```

        ### Monitoring files

        If `path` is a directory it will be recursively monitored.

        ```ts
        function monitorFile(
            path: string,
            callback: (file: string, event: Gio.FileMonitorEvent) => void,
        ): Gio.FileMonitor
        ```
      metadata: {}
    - page_content: |-
        ## Timeouts and Intervals

        Import from `astal` or `astal/time`

        ```ts
        import { interval, timeout, idle } from "astal/time"
        ```

        You can use javascript native `setTimeout` or `setInterval`
        they return a [GLib.Source](https://docs.gtk.org/glib/struct.Source.html) instance.
        Alternatively you can use these functions provided by Astal,
        which return an [AstalIO.Time](https://aylur.github.io/libastal/io/class.Time.html) instance.

        `AstalIO.Time` has a `now` signal and a `cancelled` signal.

        ### Interval

        Will immediately execute the function and every `interval` millisecond.

        ```ts
        function interval(interval: number, callback?: () => void): AstalIO.Time
        ```

        ### Timeout

        Will execute the `callback` after `timeout` millisecond.

        ```ts
        function timeout(timeout: number, callback?: () => void): AstalIO.Time
        ```

        ### Idle

        Executes `callback` whenever there are no higher priority events pending.

        ```ts
        function idle(callback?: () => void): AstalIO.Time
        ```

        Example:

        ```ts
        const timer = interval(1000, () => {
            console.log("optional callback")
        })

        timer.connect("now", () => {
            console.log("tick")
        })

        timer.connect("cancelled", () => {
            console.log("cancelled")
        })

        timer.cancel()
        ```
      metadata: {}
    - page_content: |-
        ## Process functions

        Import from `astal` or `astal/process`

        ```ts
        import { subprocess, exec, execAsync } from "astal/process"
        ```

        ### Subprocess

        You can start a subprocess and run callback functions whenever it outputs to
        stdout or stderr. [AstalIO.Process](https://aylur.github.io/libastal/io/class.Process.html) has a `stdout` and `stderr` signal.

        ```ts
        function subprocess(args: {
            cmd: string | string[]
            out?: (stdout: string) => void
            err?: (stderr: string) => void
        }): AstalIO.Process

        function subprocess(
            cmd: string | string[],
            onOut?: (stdout: string) => void,
            onErr?: (stderr: string) => void,
        ): AstalIO.Process
        ```

        Example:

        ```ts
        const proc = subprocess(
            "some-command",
            (out) => console.log(out), // optional
            (err) => console.error(out), // optional
        )

        // or with signals
        const proc = subprocess("some-command")
        proc.connect("stdout", (_, out) => console.log(out))
        proc.connect("stderr", (_, err) => console.error(err))
        ```
      metadata: {}
    - page_content: |-
        ### Executing external commands and scripts

        ```ts
        function exec(cmd: string | string[]): string
        function execAsync(cmd: string | string[]): Promise<string>
        ```

        Example:

        ```ts
        try {
            const out = exec("/path/to/script")
            console.log(out)
        } catch (err) {
            console.error(err)
        }

        execAsync(["bash", "-c", "/path/to/script.sh"])
            .then((out) => console.log(out))
            .catch((err) => console.error(err))
        ```

        :::warning
        `subprocess`, `exec`, and `execAsync` executes the passed executable as is.
        They are **not** executed in a shell environment,
        they do **not** expand ENV variables like `$HOME`,
        and they do **not** handle logical operators like `&&` and `||`.

        If you want bash, run them with bash.

        ```ts
        exec(["bash", "-c", "command $VAR && command"])
        exec("bash -c 'command $VAR' && command")
        ```

        :::
      metadata: {}
  38:
    hash: f0744d521dfce671ede9b14610545d7b4aa07eb1c1b2ff6f795334f8072700cc
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/theming.md
    documents:
    - page_content: |-
        # Theming

        Since the widget toolkit is **GTK** theming is done with **CSS**.

        - [CSS tutorial](https://www.w3schools.com/css/)
        - [GTK3 CSS Overview wiki](https://docs.gtk.org/gtk3/css-overview.html)
        - [GTK3 CSS Properties Overview wiki](https://docs.gtk.org/gtk3/css-properties.html)
        - [GTK4 CSS Overview wiki](https://docs.gtk.org/gtk4/css-overview.html)
        - [GTK4 CSS Properties Overview wiki](https://docs.gtk.org/gtk4/css-properties.html)

        :::warning GTK is not the web
        While most features are implemented in GTK,
        you can't assume anything that works on the web will work with GTK.
        Refer to the GTK docs to see what is available.
        :::

        So far every widget you made used your default GTK theme.
        To make them more custom, you can apply stylesheets to them.

        ## From file at startup

        You can pass a path to a file or CSS as a string in `App.start`

        :::code-group

        ```ts [app.ts]
        const inlineCss = `
            window {
                background-color: transparent;
            }
        `

        App.start({
            css: inlineCss,
            css: "./style.css",
            css: "/path/to/style.css",
        })
        ```

        :::

        :::warning
        When using relative paths, for example `./style.css` keep in mind that they
        will be relative to the current working directory.
        :::

        ## Css Property on Widgets

        ```ts
        Widget.Label({
            css: "color: blue; padding: 1em;",
            label: "hello",
        })
        ```

        :::info
        The `css` property of a widget will not cascade to its children.
        :::
      metadata: {}
    - page_content: |-
        ## Apply Stylesheets at Runtime

        You can apply additional styles at runtime.

        ```ts
        App.apply_css("/path/to/file.css")
        ```

        ```ts
        App.apply_css(`
        window {
            background-color: transparent;
        }
        `)
        ```

        ```ts
        App.reset_css() // reset if need
        ```

        :::warning
        `App.apply_css` will apply on top of other stylesheets applied before.
        You can reset stylesheets with `App.resetCss`
        :::

        ## Inspector

        If you are not sure about the widget hierarchy or any CSS selector,
        you can use the [GTK inspector](https://wiki.gnome.org/Projects/GTK/Inspector)

        ```sh
        # to bring up the inspector run
        astal --inspector
        ```

        ## Using SCSS

        Gtk's CSS only supports a subset of what the web offers.
        Most notably nested selectors are unsupported by Gtk, but this can be
        workaround by using preprocessors like [SCSS](https://sass-lang.com/).

        :::code-group

        ```sh [<i class="devicon-archlinux-plain"></i> Arch]
        sudo pacman -Syu dart-sass
        ```

        ```sh [<i class="devicon-fedora-plain"></i> Fedora]
        npm install -g sass # not packaged on Fedora
        ```

        ```sh [<i class="devicon-ubuntu-plain"></i> Ubuntu]
        npm install -g sass # not packaged on Ubuntu
        ```

        :::

        :::code-group

        ```ts [app.ts]
        import { exec } from "astal/process"

        exec("sass ./style.scss /tmp/style.css")

        App.start({
            css: "/tmp/style.css",
            main() {},
        })
        ```

        :::

        :::tip
        You could also transpile scss into css using a bundler
        and simply passing the path of the resulting css file to `css`.
        :::
      metadata: {}
  39:
    hash: bec79e6c90f48de9fb9c5f913711415c047b0e068c073bffb264b756b93b5db3
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/guide/typescript/widget.md
    documents:
    - page_content: '# Widget'
      metadata: {}
    - page_content: |-
        ## Gtk3

        ### Additional widget properties

        These are properties that Astal additionally adds to Gtk.Widgets

        - `className`: `string` - List of class CSS selectors separated by white space.
        - `css`: `string` - Inline CSS. e.g `label { color: white; }`. If no selector is specified `*` will be assumed. e.g `color: white;` will be inferred as `* { color: white; }`.
        - `cursor`: `string` - Cursor style when hovering over widgets that have hover states, e.g it won't work on labels. [list of valid values](https://docs.gtk.org/gdk3/ctor.Cursor.new_from_name.html).
        - `clickThrough`: `boolean` - Lets click events through.

        To have a full list of available properties, reference the documentation of the widget.

        - [Astal3 widgets](https://aylur.github.io/libastal/astal3/index.html#classes)
        - [Gtk3 widgets](https://docs.gtk.org/gtk3/#classes)

        Most common ones you will use frequently are
          - [halign](https://docs.gtk.org/gtk3/property.Widget.halign.html)
          - [valign](https://docs.gtk.org/gtk3/property.Widget.valign.html)
          - [hexpand](https://docs.gtk.org/gtk3/property.Widget.hexpand.html)
          - [vexpand](https://docs.gtk.org/gtk3/property.Widget.vexpand.html)
      metadata: {}
    - page_content: |-
        ### Additional widget methods

        #### setup

        `setup` is a convenience prop to remove the need to predefine widgets
        before returning them in cases where a reference is needed.

        without `setup`

        ```tsx
        function MyWidget() {
            const button = new Widget.Button()
            // setup button
            return button
        }
        ```

        using `setup`

        ```tsx
        function MyWidget() {
            function setup(button: Widget.Button) {
                // setup button
            }

            return <buttons setup={setup} />
        }
        ```

        #### hook

        Shorthand for connection and disconnecting to [Subscribable and Connectable](./binding#subscribable-and-connectable-interface) objects.

        without `hook`

        ```tsx
        function MyWidget() {
            const id = gobject.connect("signal", callback)
            const unsub = variable.subscribe(callback)

            return <box
                onDestroy={() => {
                    gobject.disconnect(id)
                    unsub()
                }}
            />
        }
        ```

        with `hook`

        ```tsx
        function MyWidget() {
            return <box
                setup={(self) => {
                    self.hook(gobject, "signal", callback)
                    self.hook(variable, callback)
                }}
            />
        }
        ```

        #### toggleClassName

        Toggle classNames based on a condition

        ```tsx
        function MyWidget() {
            return <box
                setup={(self) => {
                    self.toggleClassName("classname", someCondition)
                }}
            />
        }
        ```
      metadata: {}
    - page_content: |-
        ### How to use non builtin Gtk widgets

        Using the `astalify` mixin you can subclass widgets
        to behave like builtin widgets.
        The `astalify` mixin will apply the following:

        - set `visible` to true by default (Gtk3 widgets are invisible by default)
        - make gobject properties accept and consume `Binding` objects
        - add properties and methods listed above
        - set up signal handlers that are passed as props prefixed with `on`

        ```tsx
        import GObject from "gi://GObject"
        import { Gtk, Gdk, Widget, astalify, type ConstructProps } from "astal/gtk3"

        // subclass, register, define constructor props
        class ColorButton extends astalify(Gtk.ColorButton) {
            static { GObject.registerClass(this) }

            constructor(props: ConstructProps<
                ColorButton,
                Gtk.ColorButton.ConstructorProps,
                { onColorSet: [] } // signals of Gtk.ColorButton have to be manually typed
            >) {
                super(props as any)
            }
        }

        function MyWidget() {
            function setup(button: ColorButton) {

            }

            return <ColorButton
                setup={setup}
                useAlpha
                rgba={new Gdk.RGBA({
                    red: 1,
                    green: 0,
                    blue: 0,
                    alpha: 0.5,
                })}
                onColorSet={(self) => {
                    print(self.rgba)
                }}
            />
        }
        ```

        :::info
        Signal properties have to be annotated manually for TypeScript.
        You can reference [Gtk3](https://gjs-docs.gnome.org/gtk30~3.0/)
        and [Astal3](https://aylur.github.io/libastal/astal3/#classes) for available signals.
        :::
      metadata: {}
    - page_content: |-
        ### TypeScript

        Type of widgets are available through `Widget`.
        Here is an example Widget that takes in and handles a possibly `Binding` prop.

        ```tsx
        import { Binding, Variable } from "astal"
        import { Widget } from "astal/gtk3"

        export interface ToggleButtonProps extends Widget.ButtonProps {
            onToggled?: (self: Widget.Button, on: boolean) => void
            state?: Binding<boolean> | boolean
            child?: JSX.Element
        }

        export default function ToggleButton(btnprops: ToggleButtonProps) {
            const { state = false, onToggled, setup, child, ...props } = btnprops
            const innerState = Variable(state instanceof Binding ? state.get() : state)

            return <button
                {...props}
                setup={self => {
                    setup?.(self)

                    self.toggleClassName("active", innerState.get())
                    self.hook(innerState, () => self.toggleClassName("active", innerState.get()))

                    if (state instanceof Binding) {
                        self.hook(state, () => innerState.set(state.get()))
                    }
                }}
                onClicked={self => {
                    onToggled?.(self, !innerState.get())
                }}
            >
                {child}
            </button>
        }
        ```
      metadata: {}
    - page_content: |-
        ### Builtin Widgets

        These widgets are available by default in JSX.

        - box: [Astal.Box](https://aylur.github.io/libastal/astal3/class.Box.html)
          ```tsx
          <box>Horizontal Box</box>
          ```
          ```tsx
          <box orientation={1}>Vertical Box</box>
          ```
        - button: [Astal.Button](https://aylur.github.io/libastal/astal3/class.Button.html)
          ```tsx
          <button onClicked={self => print(self, "was clicked")}>
              Click Me
          </button>
          ```
        - centerbox: [Astal.CenterBox](https://aylur.github.io/libastal/astal3/class.CenterBox.html)
          ```tsx
          <centerbox orientation={1}>
              <label vexpand valign={Gtk.Align.START} label="Start Widget" />
              <label label="Center Widget" />
              <label vexpand valign={Gtk.Align.END} label="End Widget" />
          </box>
          ```
        - circularprogress: [Astal.CircularProgress](https://aylur.github.io/libastal/astal3/class.CircularProgress.html)
          ```tsx
          <circularprogress value={.5} startAt={0.75} endAt={0.75}>
              <icon />
          </circularprogress>
          ```
          ```css
          circularprogress {
              color: green;
              background-color: black;
              font-size: 6px;
              margin: 2px;
              min-width: 32px;
          }
          ```

        - drawingarea: [Gtk.DrawingArea](https://docs.gtk.org/gtk3/class.DrawingArea.html)
          ```tsx
          <drawingarea onDraw={drawingFunction} />
      metadata: {}
    - page_content: |-
        ```

        - entry: [Gtk.Entry](https://docs.gtk.org/gtk3/class.Entry.html)
          ```tsx
          <window keymode={Astal.Keymode.ON_DEMAND}>
              <entry
                  onChanged={self => print("text changed", self.text)}
                  onActivate={self => print("enter", self.text)}
              />
          </window>
          ```

        - eventbox: [Astal.EventBox](https://aylur.github.io/libastal/astal3/class.EventBox.html)
          ```tsx
          <eventbox
              onClick={(_, event) => {
                  print(event.modifier, event.button)
              }}
          />
          ```

        - icon: [Astal.Icon](https://aylur.github.io/libastal/astal3/class.Icon.html)
          ```tsx
          <icon icon={GLib.get_os_info("LOGO") || "missing-symbolic"} />
          ```
          ```css
          icon {
            font-size: 16px;
          }
          ```

        - label: [Astal.Label](https://aylur.github.io/libastal/astal3/class.Label.html)
          ```tsx
          <label label="hello" maxWidthChars={16} wrap />
          ```

        - levelbar: [Astal.LevelBar](https://aylur.github.io/libastal/astal3/class.LevelBar.html)
          ```tsx
          <levelbar value={0.5} widthRequest={200} />
          ```

        - overlay: [Astal.Overlay](https://aylur.github.io/libastal/astal3/class.Overlay.html)
          ```tsx
          <overlay>
              <box heightRequest={40} widthRequest={40}>Child</box>
              <box className="overlay" valign={Gtk.Align.START} halign={Gtk.Align.END}>1</box>
          </overlay>
      metadata: {}
    - page_content: |-
        ```

        - revealer: [Gtk.Revealer](https://docs.gtk.org/gtk3/class.Revealer.html)
          ```tsx
          <revealer
              setup={self => timeout(500, () => self.revealChild = true)}
              transitionType={Gtk.RevealerTransitionType.SLIDE_UP}>
              <label label="Child" />
          </revealer>
          ```

        - scrollable: [Astal.Scrollable](https://aylur.github.io/libastal/astal3/class.Scrollable.html)
          ```tsx
          <scrollable heightRequest={100}>
              <box orientation={1}>
                  {Array.from({ length: 10 }, (_, i) => (
                      <button>{i}</button>
                  ))}
              </box>
          </scrollable>
          ```

        - slider: [Astal.Slider](https://aylur.github.io/libastal/astal3/class.Slider.html)
          ```tsx
          <slider widthRequest={100} onDragged={self => print("new value", self.value)} />
          ```

        - stack: [Astal.Stack](https://aylur.github.io/libastal/astal3/class.Stack.html)
          ```tsx
          <stack visibleChildName="child2">
              <label name="child1" label="child1" />
              <label name="child2" label="child2" />
          </stack>
          ```

        - switch: [Gtk.Switch](https://docs.gtk.org/gtk3/class.Switch.html)
          ```tsx
          <switch onNotifyActive={self => print(self.active)} />
      metadata: {}
    - page_content: |-
        ```

        - window: [Astal.Window](https://aylur.github.io/libastal/astal3/class.Window.html)
          ```tsx
          <window
              className="Bar"
              name="bar"
              namespace="bar"
              application={App}
              monitor={0}
              anchor={Astal.WindowAnchor.TOP | Astal.WindowAnchor.LEFT}
              exclusivity={Astal.Exclusivity.EXCLUSIVE}
              keymode={Astal.Keymode.ON_DEMAND}
          >
              <centerbox />
          </window>
          ```
      metadata: {}
    - page_content: |-
        ## Gtk4

        The Gtk4 js library does not add any additional properties to the widgets,
        but it still has some additional properties that the constructors handle.

        - `type`: `string` an arbitrary string that the [Buildable](https://docs.gtk.org/gtk4/iface.Buildable.html) interface uses.
        - event handlers for [EventControllers](https://docs.gtk.org/gtk4/class.EventController.html)
          ```ts
          type EventController<Self extends Gtk.Widget> = {
              onFocusEnter?: (self: Self) => void
              onFocusLeave?: (self: Self) => void

              onKeyPressed?: (self: Self, keyval: number, keycode: number, state: Gdk.ModifierType) => void
              onKeyReleased?: (self: Self, keyval: number, keycode: number, state: Gdk.ModifierType) => void
              onKeyModifier?: (self: Self, state: Gdk.ModifierType) => void

              onLegacy?: (self: Self, event: Gdk.Event) => void
              onButtonPressed?: (self: Self, state: Gdk.ButtonEvent) => void
              onButtonReleased?: (self: Self, state: Gdk.ButtonEvent) => void

              onHoverEnter?: (self: Self, x: number, y: number) => void
              onHoverLeave?: (self: Self) => void
              onMotion?: (self: Self, x: number, y: number) => void

              onScroll?: (self: Self, dx: number, dy: number) => void
              onScrollDecelerate?: (self: Self, vel_x: number, vel_y: number) => void
          }
      metadata: {}
    - page_content: |-
        ```

        - `setup`: `(self): void` setup function that runs after constructor
          ```tsx
          // without `setup`
          function MyWidget() {
              const button = Widget.Button()
              // setup button
              return button
          }

          // using `setup`
          function MyWidget() {
              function setup(button: Widget.Button) {
                  // setup button
              }

              return <buttons setup={setup} />
          }
          ```

        There is also a `hook` utility

        ```tsx
        // without `hook`
        function MyWidget() {
            const id = gobject.connect("signal", callback)
            const unsub = variable.subscribe(callback)

            return <box
                onDestroy={() => {
                    gobject.disconnect(id)
                    unsub()
                }}
            />
        }

        // with `hook`
        import { hook } from "astal/gtk4"

        function MyWidget() {
            return <box
                setup={(self) => {
                    hook(self, gobject, "signal", callback)
                    hook(self, variable, callback)
                }}
            />
        }
        ```
      metadata: {}
    - page_content: |-
        ### How to use non builtin Gtk widgets

        Using the `astalify` function you can create wrappers around widget constructors
        to make them behave like builtin widgets.
        The `astalify` function will do the followings:

        - make `gobject` properties accept and consume `Binding` objects
        - handle properties listed above
        - set up signal handlers that are passed as props prefixed with `on`

        ```tsx
        import GObject from "gi://GObject"
        import { Gtk, astalify, type ConstructProps } from "astal/gtk4"

        type CalendarProps = ConstructProps<Gtk.Calendar, Gtk.Calendar.ConstructorProps>
        const Calendar = astalify<Gtk.Calendar, Gtk.Calendar.ConstructorProps>(Gtk.Calendar, {
            // if it is a container widget, define children setter and getter here
            getChildren(self) { return [] },
            setChildren(self, children) {},
        })

        function MyWidget() {
            function setup(button: Gtk.Calendar) {

            }

            return <Calendar
                setup={setup}
                onDaySelected={(self) => {
                    print(self.day)
                }}
            />
        }
        ```
      metadata: {}
    - page_content: |-
        ### Builtin Widgets

        These widgets are available by default in JSX.

        - box: [Astal.Box](https://aylur.github.io/libastal/astal4/class.Box.html)
          ```tsx
          <box>Horizontal Box</box>
          ```
          ```tsx
          <box orientation={1}>Vertical Box</box>
          ```
        - button: [Gtk.Button](https://docs.gtk.org/gtk4/class.Button.html)
          ```tsx
          <button onClicked={self => print(self, "was clicked")}>
              Click Me
          </button>
          ```
        - centerbox: [Gtk.CenterBox](https://docs.gtk.org/gtk4/class.CenterBox.html)
          ```tsx
          <centerbox orientation={1}>
              <label label="Start Widget" />
              <label label="Center Widget" />
              <label label="End Widget" />
          </box>
          ```
        - entry: [Gtk.Entry](https://docs.gtk.org/gtk4/class.Entry.html)
          ```tsx
          <window keymode={Astal.Keymode.ON_DEMAND}>
              <entry
                  onNotifyText={self => print("text changed", self.text)}
                  onActivate={self => print("enter", self.text)}
              />
          </window>
          ```

        - image: [Gtk.Image](https://docs.gtk.org/gtk4/class.Image.html)
          ```tsx
          <image iconName={GLib.get_os_info("LOGO") || "missing-symbolic"} />
          ```
          ```css
          image {
            -gtk-icon-size: 16px;
          }
          ```

        - label: [Gtk.Label](https://docs.gtk.org/gtk4/class.Label.html)
          ```tsx
          <label label="hello" maxWidthChars={16} wrap />
          ```

        - levelbar: [Gtk.LevelBar](https://docs.gtk.org/gtk4/class.LevelBar.html)
          ```tsx
          <levelbar value={0.5} widthRequest={200} />
      metadata: {}
    - page_content: |-
        ```

        - overlay: [Gtk.Overlay](https://docs.gtk.org/gtk4/class.Overlay.html)
          ```tsx
          <overlay>
              <box heightRequest={40} widthRequest={40}>Child</box>
              <box type="overlay measure" >1</box>
              <box type="overlay clip" >2</box>
              <box type="overlay clip measure" >3</box>
          </overlay>
          ```

        - revealer: [Gtk.Revealer](https://docs.gtk.org/gtk4/class.Revealer.html)
          ```tsx
          <revealer
              setup={self => timeout(500, () => self.revealChild = true)}
              transitionType={Gtk.RevealerTransitionType.SLIDE_UP}>
              <label label="Child" />
          </revealer>
          ```

        - slider: [Astal.Slider](https://aylur.github.io/libastal/astal4/class.Slider.html)
          ```tsx
          <slider widthRequest={100} onNotifyValue={self => print("new value", self.value)} />
          ```

        - stack: [Gtk.Stack](https://docs.gtk.org/gtk4/class.Stack.html)
          ```tsx
          <stack visibleChildName="child2">
              <label name="child1" label="child1" />
              <label name="child2" label="child2" />
          </stack>
          ```

        - switch: [Gtk.Switch](https://docs.gtk.org/gtk4/class.Switch.html)
          ```tsx
          <switch onNotifyActive={self => print(self.active)} />
          ```

        - menubutton: [Gtk.MenuButton](https://docs.gtk.org/gtk4/class.MenuButton.html) and popover: [Gtk.Popover](https://docs.gtk.org/gtk4/class.Popover.html)
          ```tsx
          <menubutton>
            <label label="Button Content" />
            <popover>
              <label label="Popover Content" />
            </popover>
          </menubutton>
      metadata: {}
    - page_content: |-
        ```

        - window: [Astal.Window](https://aylur.github.io/libastal/astal4/class.Window.html)
          ```tsx
          <window
              cssClasses={["Bar"]}
              name="bar"
              namespace="bar"
              application={App}
              monitor={0}
              anchor={Astal.WindowAnchor.TOP | Astal.WindowAnchor.LEFT}
              exclusivity={Astal.Exclusivity.EXCLUSIVE}
              keymode={Astal.Keymode.ON_DEMAND}
          >
              <centerbox />
          </window>
          ```
      metadata: {}
  40:
    hash: 6b101f505f5e924199e35caf5d951179a38133ccc3854e3f73846eb5573ff579
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/showcases/index.md
    documents:
    - page_content: |-
        ---
        layout: home
        ---

        <script setup>
        import Showcases from './Showcases.vue'
        </script>

        <Showcases />
      metadata: {}
  41:
    hash: c9fef1ba300785f1028a1d001d6ea095a2b6ab25c4cda02df1554b9af0cab915
    path: https://raw.githubusercontent.com/Aylur/astal/main/docs/index.md
    documents:
    - page_content: |-
        ---
        layout: home
        pageClass: home-page

        hero:
          name: "Astal"
          text: "Create Beautiful Widgets With Ease"
          tagline: "The Linux Suite and Framework to Craft Desktop Shells and <i>beautiful</i> <i>functional</i> Wayland Widgets with GTK!"
          image: /icon.svg
          actions:
            - theme: brand
              text: What is Astal?
              link: /guide/getting-started/introduction
            - theme: alt
              text: Get Started
              link: /guide/getting-started/installation
            - theme: alt
              text: References
              link: /guide/libraries/references

        features:
          - title: Use Your Preferred Language
            icon: <i style="color:var(--vp-c-brand-3)" class="devicon-typescript-plain"></i>
            details: The main focus of Astal is TypeScript+JSX. But you can use the libraries in any language that supports <a href="https://en.wikipedia.org/wiki/List_of_language_bindings_for_GTK">Gobject Introspection</a>.
          - title: No bash scripts needed
            icon: <i style="color:var(--vp-c-brand-3)" class="devicon-bash-plain"></i>
            details: Includes modules to work with Network, Bluetooth, Battery, Audio and <a href="/astal/guide/libraries/references#astal-libraries">more</a>.
          - title: Use any Gtk widget
            icon: <i style="color:var(--vp-c-brand-3)" class="fl-gtk"></i>
            details: With Astal you work with Gtk directly. You are not limited to only a set of them.
        ---
        <!--TODO: add icons for buttons https://github.com/vuejs/vitepress/pull/3795-->
      metadata: {}
    - page_content: |-
        <style>
        :root {
          --vp-home-hero-name-color: transparent;
          --vp-home-hero-name-background: -webkit-linear-gradient(120deg, var(--vp-c-purple-3), var(--vp-c-brand-3));

          --vp-home-hero-image-background-image: linear-gradient(-45deg, var(--vp-c-purple-3), var(--vp-c-brand-3));
          --vp-home-hero-image-filter: blur(44px);
        }

        :root {
          --overlay-gradient: color-mix(in srgb, var(--vp-c-brand-1), transparent 55%);
        }

        .dark {
          --overlay-gradient: color-mix(in srgb, var(--vp-c-brand-1), transparent 85%);
        }

        .home-page {
          background:
            linear-gradient(215deg, var(--overlay-gradient), transparent 40%),
            radial-gradient(var(--overlay-gradient), transparent 40%) no-repeat -60vw -40vh / 105vw 200vh,
            radial-gradient(var(--overlay-gradient), transparent 65%) no-repeat 50% calc(100% + 20rem) / 60rem 30rem;

          .VPFeature a {
            font-weight: bold;
            color: var(--vp-c-brand-2);
          }

          .VPFooter {
            background-color: transparent !important;
            border: none;
          }

          .VPNavBar:not(.top) {
            background-color: transparent !important;
            -webkit-backdrop-filter: blur(16px);
            backdrop-filter: blur(16px);

            div.divider {
              display: none;
            }
          }
        }

        @media (min-width: 640px) {
          :root {
            --vp-home-hero-image-filter: blur(56px);
          }
        }

        @media (min-width: 960px) {
          :root {
            --vp-home-hero-image-filter: blur(68px);
          }
        }
        </style>
      metadata: {}
vectors:
  0-0: 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
  1-0: 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
  1-1: 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
  2-0: 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
  2-1: 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
  2-2: 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
  3-0: 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
  3-1: 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
  3-2: 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
  3-3: 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
  4-0: wqHxPAbivDzGT129aOdxvLKElTzlIwW8J7GPPWoXAD3Z7Ni763Opuxp8fjzGdBI9c+JbPSn497xOKiQ9vLEDvfIS3TxPl3Q9SDy9vBznvruH5i49NjxCvRCLGb3W4NA76hsovOXhnr0+Wtw8FKH3PK+nTr0da/y8JwBXu/Ea9zwXaoK8FXQrPbEJ4zzPivU87g61vPFmjT094Uk8ccs+vYEO+bwbllS9bbggvWQwRT1BV/C7xFjrPKFBSbxjYg89+x5uvWgRQb3rPpM9GuVCvdDo9Ly8KAs9YumovMIt6bzddiy9F5R6veVMTz2u7Z+8v9+LvK5a7LxlbwO9tDv1O5ZpCL3Effy8694gveR6qDoowrW6jnLrvOc8B71oJH48k5SvvfBmiT1F5pu5+AJSOyn0HL1eod+7glgxPA+/JjtVRpG7vmY6PJHORT3NwVS7I3AcPFrEDL0Vah885DWVvXYMdrzZrMW8FWXuPeRt/rwXQuw8XdoDPcMyIz3S7iO9J8CevXB81b18JuE7GQAbPdB2bbwHfps57HuxuwEGZb1j3ao8HanQvEysDLlRDx+9nBZ4vQEfez10mT095dUsO6wSmTzGnvO7y1UevXpybzuGU2S8e3g5PUuBubz8eLm8CUa9PJWCAj28V5o9t5VuPZZfpjz082w8j1jYuq6XnLyW/IW8qnmQvMK5yTxc7xK9xwqgPMkPnzoy1Uw9Etkfu5xH1Txoqxs8EFD8PKCxvrpAxac8zQMdvRiJtr32zdo8qSlPvKsXjb0iHVC7/8ymPTt/Dz3yzJM8nudXvXtFEjzONt08F3ezvAMNTz2shou8UyU3PUdmgr3Hy508AfpzvEA7hz2tCua86lGoO25xbTxVol46S4ANvR0KNby4fxu9wQidPKblYDxrBWu8/ni6u9xJ5bwr9Bo8Ta0dPYK98TyNapK8Hj+MPPDnszppFPi8uP+PPUwBPDzfYTY7r59mvTWPuD3ApS09ac6CvYh5Pj0knjI9gweIPdfNIb1GkzC9giG8PVaAbz3emDK9NfeEvFOlRz0IS2e8MNmyvDuFFb2KlVQ97ihXPHEYRr2TTri8v0OGvXQNoDxGzaw8txglvZgH07wk0Lo8J2+ZvdHPrDweM8S7NdkQvSW2Rjrbnp+8lmRiPULs9TzwKss9UKtkvV4hszuYmpC8WQarvHWSzTzpFAo9ZqGHPI0jTLvLZvm8xPGGvB7A7jtx4Ri9PNHoPPQ5ED3NN249zPQuve3vNTsSFuk8977EvNqTGLwc5FE8nzB6PDFbWLzYA7Q8uiYiPDccWz1s+Pw8TpYUPXCsZDwxL8w8Vk9CvMrqCL06Gju9DM0mvUNVwDuKV+28+P4NvXQNLD1P+CG8WGpJPGHsZ7pJZF09a9zRvJAYOrynAyO91edbvfrtk73sarq8uMTJPICHGz359vK84/CyPKC+a71riW+9zaY7ujlkmL0HXBg8YRgqvHo7Qj2Qs2i8J5QWvUDtID1yBYG8IYjDPOsnRb0eKpE9kTz1uzh0Lb2Y+6k8p84LvbG077x7pco8TLKFPOwjyby4pba9gYcKPSyaJTy9+wY94NVmPVHEz7y5avy835SyPCX6/LxSkqK900EzPUsICr3astW7yj+LvFGwRr3GngG9AKxtvAT0JzxvBy+8UPtXvZhPFTnvDcy8z9eKvHET8L2forG8OvOJvH1+hLzf9vC8GSaTPHNgLb00jaW8c/BZvB93q7y9PPC8ORoLPeEFebxrEQo9A/olPYleLjwVOYK9JAGmvNQB1zw8FEk9M+3gvBkkgzw0xkM88+WJPbf/kDwpoSg9uyBMPUDS/zwdF4K8MlNhvZeABD29SQe9eIoCvX98qTw3FZ88GIl8PLc/E73+pGK8oYAcvMfBlTsUjsc7eQ4hO8EpIrtzbSK83mO/u4zE0zzNzJu7RtdmPW3XPLwf5fW74kH0O1QdBT2eYOC8/7axvKcTzrxIfBY9o9iEO0oTFz0IYYg8uBQrvanSjb1mBto8p91OOh6j6rzEsL48mY+FPF9DuDwYUyE9eK+gvHsBmD1smQW9/PT2vIK8Er3SKRi8DiRZvQbneDxNe4w8Rb/HPC/4VDzamDY9rjzIuVhEXD3FAgk6yZArPcMZjjx5OFq9EakfPcY9J70SdQG8fDmAvHUscz1g0iM9/jUDOotyGDu+vYG8PNjGuAHwCz3zI2k85VgpvAcebLwdaVQ6NriaOWeznTxqCYu7BoHbu8uK9rwDjxa9cbRcO5knmLxDaKu9JD9qvdMQrjuSUpq80QdzPO0clz10Kxk9TxsqvQ+NJT3D5sa892tyPanambzg+1C9tDx0PZIp5DuxwZw8LttXPSJVhD3Z3tQ8vSWrvMTVcz29/iU9cId/PC6v7DuBgDa9GlAHvd6virzBqgS8GARAvFWIw73ph4481/hgPGRJTTw67hy8Fo/cPBQj+bx/geg7fflNPVcnSDukRTs9gl4jvUTPmb3fXaM87Tw3PFRdQjxJKvQ8Q3CAPEqlMj1rooe8LtMCPG1iZz2TBPA8gmlHPB2Ytbxf/c+8ydIVvFELYT3/32O8NgO7PIE5FD2ty4m8v7sKvdAzPbyihwu7hjG6vIGq9Tz44Le8Td6nvBMbqr1cOgI9ZiY6vPb5Tj3gWwO9bLu+vIKgSLsEiXg9eE8FPezLpLyn2JK7uXoYvEBTkDxueKG7hbykOyDsYD2UyDI9GSGfPNcJCr33Uca8niCHvBSMkL3vyUU9H2lOvQA1qbyTfoI6F7duPIRUYr1qaJG8SVYnPZ8QJDxltQa9S4zyvHnvCzyKhnu8kA5ZvKvfnbzWTMA5lWS5PcIERb0P1uc8TzvkvKBcm7zAGAW9M8MnOpngjz0NyYg89it8Oyt9zbhCysE7JqgRPHKsvT2QOgU9q3DZPPp2aj3rrr68DEQoPX75NLzEijS9Ov/juyjrury+CqK85nuXvD8tzTtPiGQ8xV2PPK29lTvm7xs8seISvYlkjrxZdZO8vY4dPf7H17yjitc7scY3PS/8Ar2B/nE6uLo1vZtWGr2FQHI89YjEuQCT7Dw9Voq7dsYzvd4xeTz4LoE81XTUPM6jOj0lVhA8E7gFPTConrt8E3695eilPF/0DDwXOkI8JwlOPOR5qDyBCR29ZQDYvKiOxLzI+hC7YdcRO8DEpLzqFX29AxfrPJXOajzDyiW9MNPPu8lSFr0sNuU8Cn0YveM0Fb27Foi96uN4O+hwsL1WR8U8kyUcOyTEl7zRdw49Y8SwO7hder3fGNy92AAmPLISyrz9BvM8DcnSPCJo8Dxku8I7oxpPPMOQWr2WNS89RglMvNhnXr2JV0W7bE0xvL+SFT38EAS87p/1Oyht1Ly/rjQ9EmVYvZ7BAz2tYh28OGMJPSclYT2VjhI8XLFUvSNNSz1FL+g7QKRoPUN8Arz+tlK98E9ZPXH+XrtM2ZU8fBvjPAPYoD0zCQ691LT2PPiRXL1JAUo9UU+DvQyIprwZHGO9/EV1vEvTCjz2jss5H3aYvKH2GLwutJu6Dn7KvD99sLySKFS9kroVvRzTgjlaPY08nC2VOicPZLrFADM9NwccPa3b3bsdcbc84u+BvTnKnzr9hRC8uD38vK6mzjxJnYO8+eNkvd9SOLxiJvm8JivmPJyqLDwGcJQ87fmAvM3igL1pMic8m6eZvPyFQrxQJ0O8q9UePSRrGrz6p2k9yEpGvJQtgTyd+G67BEsxvUvtnTxNWNi7r9zgvNokprx56CQ9Z2v4vGdCID1QzMU8jqh3u6G9sDwOXKO9lmXXPLHTCD0JoZg8OqJAPXBZUTzwpCI9qHZcPRUf+TzLs6Y7AIyAPShyMb2UXJo9Lt6TPWGgED3BSUM897hWva0mjrx1DoS9DbNdPUER+7uw6Ku7NFWEuwuTDT1s8OG81OnrvG0mjjyqDQm9ghNSOxTyjDwcALQ6KP5Bu9heyL2h+oa9WgvuPL+PYT0C0EE8eswRO1YumLyv4oK8Sm7PvThIyjz1q9Y8bqGcPBFh8jxQgCO9v+rbPFoo3LxT0B883mxXPQP9g72PRy08CVOCvCw6Lz2xhYi9LWXju0XZDz2YqQU9
  5-0: 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
  5-1: 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
  6-0: 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
  6-1: YbZJOzTcEjzxJoy9XJhQvC21LrzTfBi8FB6+PXJ4cj27tqm7GUSYPE7lBT0yWVA9mjIwPelFCr2Pe2I9EUhMvUbwrDzXcU49p8c3vQsI5LxJlm89mkfLvP8gG73L5Y48YKMhvdAair31i/g7nURmvK49i7u7faq8eTyMvJ3mX7wZBAs9AgkePTPJVTyTdEU8Bn9fvLBufT0FrYW7wOKQvSz0cr34gTq9bbkAvWdhYD1cwaw87oxdPQ6m47y2rn08B7E/ve3e3ryemrY9k1gavSpAXb09CA49N+1AvXAQab2wk/m84ExJvUYNRDymFS48e3wbvWc85rwpexm9jmjCvEFAKb2Pqj48OBzIvAPFMr3T8yK8C3hovF8sfr1kMee80qjVvQmtjT3O16+7vWKwu44cyLydlXO8MgjhPAoSOLyXJQW8DGetPPAZdTyRUsw8UloPO4EDU7z+yXM7Ova6vXp6Ub2Hoyu9mJ6GPUBEO7zAS1A723XMPPInDj24Kd47QL19vaE5wL2ehVc8WMWKPDZYUL3Qv8685v89vPbV4ryyHNi7hFUQvVcPlTu244i9DKMLvUCFoD1tapM7Adg8u75Ejbvz1Ns8xIBnvFEwr7yc6X66P19CPdUCqzsbhlq8t3A9Pfm9mDu63Rs9s32JPel4ury55M07TtxYPA3FtjwYuHK91MmyOxBdaLtAV0O9lIc2u+KMoLx0ETo9/JSVvMQKDj3RALA8G+ghPUJN6TuaPDu89beCvdmQgL0OLoU8mwcPvWUSIr2Ushe86f2cPe3hkTz9Vrw8FXwqvdOQXzyC34A9uYuaOwyPfbqbfHK8MbNLPbgGa70ZmB495pLkupe87DweOJI7AnYHvPmhBD3+HzO7kfZvvFKN2ryE1KW9hdJFu62XCD0ofEE7xVeLvIwHWL1zvZ88DflXPP4EDT2kXtK8/N9JuCQpyDzN1q+8YvliPd4czbycvc08EEuHveyAXT2RFhA9trxEvbvnLj09gIE9UZNNPaq+A73W7NS7hlW6PfqXAj1JixO8TxdNPPKQFj1aYnK6fruZu6RQHL17UWc9299FPPt4CL14bAW8F5eFvQm2PDy+QKu88DCNvFXjMr2MG+c823kpvUMQjTpSGOU83VGHvTM0M7uSQIU8tswEPUAXhzum+Kw97hu/vDBgAzwhJUG8+5wqPSecGz2p6eI8Kb9yPTDB3bwREUu8lOI3vQAYATzp9Sa6N0MpPE65jjyKyn09XnBTvXBpejxIhoU9qMgOvdH1N7xfQj68sRUJPRhd4LqxLUk8wm+nPCH3MD2q94w8cPFSPYuqzTx1VM47fTs0ux9dgryV9/+88jAXvItRJ7r1FZy8ayVRvVKxGD3BnpM7lF97vGLVhjyrc349vQhYvOPi+LtVfhe996HxvBGSWb39zwW9n3SYOdsAujx6mcq7luAXPeI1vrxueI69ie7tPMs1qb1/5wK7AUzivAXMTTyRGPO8J6QTvXwfwjwZl7k7JNWgPHkAk7x8pkQ9aabTu4OvHbxzxO88XzN8veAtgb1+Iww9UmnmPOrsTbyQZ6m9yJJQPUGFYTxOReA7u0w9PeMphbyex029hiuePLNX0zs8In69XZTfPGdNkrwdNEa8fxc6vRbWNL29TXS8SJE5vGxBkbvgXfK7IFuivHMTyjyhxEa9+BesPKa5uL0/VBO9y6ERvPw/o7uMyp+8nrO9OcccOr1fESK9JkqvO0GI6ryBEru8GR/AO7zDizyJyKU8Il5sPYpcMDzQCEi9YCNjvCBvwzze5yA9teuLvARX8jrtUAU9hpiNPZCJUrzQgCU9rYpnPSLFXrxheoa8peCXvX0w+Tv3xYq8q7L1vH20PT3pSWQ88IuJPKXDOL25yyC8jPfzu7SzPzxOZ5o7q3OKPEf3bz3cC7+8gVUFvbnm3jxaFQi8iL2aPWLs2by9aqS8/YmcO9eArDyUxnC9GxdLvCS3CL1QbMA92Jwsu0bVXDyIQHU9tRO1vGSXzL3e8Js8Ev9VvMu8/7q3dJs8C0rbPPv1Oz30uWg9cEyavF+aVD1Spiu9dtfpvAFn7ry8LZg76EBWvfp+Pj2yE0E8cttPPQj8pTuaTL88w6G/vFboAj1B3QI8azYEPbg0ljsbimO9HvikPDBmGb2QWiy9yhbCvBACSj2qkFE8HI2Du26OELyv0za9CJu4PL45Oz3A5XE8Rm7IPOjL0btQtK880rt2vB2dxDwJ1LI7E6a6O7RVfbpyYtK8lfAevTjPkrz5QUe8Ezo3vM1xYLtuwM+8hwRJPPKGUD306JA8lQpnvc0pnjyUgeO8YwIOPStpcLvUHQC9QkzePO9VIz0dgmE8SqxTPT8ZDz0TwAM9PGrpvGDcdD03P389tuZevOIK3bwaOVK9HaVqPDrjJb05yJA8Aj8yPAEpwr1F+b48hdqMu30jprupkfE75UjqPPnS+LtGGkY7U4llPdc+LTxxZ4s9ms0sveYXK72U1Yk84cLuvJvDBj1lPjI90OR9u6anIT0GZcK7Cn5JPCIdET3tNuM7zImuu/6xPby0W2O83xG1PFV9Wj0/8Bi8rsckPUhrcT1oVUM5odqZvE2SRLxJzVM8fa1YO0ZOHD3nwBq9xvH5vLljob2nMEY9Vu82vBx/TT3vfNy8G39UvS+u4btcdGE9rWtyPNB07rz7f9S8KC/xO/MdATxGGOC6oaSXPCrthz1RXjo9iHbKO5ZbFbyNYCo8uTvTvHXgJL3FKSc91vwPvUD+MbxbGSy9V/SZvLrkgL0p2LU7cAUBPRVxKj2jD0O9s2CzvC5mXL0yvnC8GLnouQHGf7z9sbg7LLTyPbFZIL0A3eM8hkgwvGd/+zvXpmq9qKgWPSF7hD0m/rE7dH8GPaN9Krx/Ah27+jCnPDEVsz2I8D07CHGhPHJBFT0ctJy85ygRPYJ+srwsFrC8t21WvClnhbtAVZe7aMLBvL6IPjz682w8hiJ8O1fpCT1SxP672UoRvbpF/bzkUiC7TGrdu5utGTlPyBO9MPfVPIMj/LtAKxW98I5qvTJFmrykUUs8RYi0vHPYGD32EV+8HMQNvdecUbycO8e8WR7RPOzxUD1wbRU9YAFyPcLvBL3AO6i94604PQA4Jj3pUTM9qUwzO8L8KjzYpbW8KiUkvaQUhLyUDoa8lgUIvBflNb2jrkS9GdA1O4Jjb7tikmW9l1RQvCSZRb1oozg9txV5O0NBRL1a+gq9brhzPLHZh70Kbj685CzROp82ozzpndA8wPkVO6+UO70t+pi9ItMLPGHAkbz45+I8varPPB0E5Tz1IfK5W9WKvAv1gLwSGV09Nk3uvCmcEr3FJQi8oKcjPAuupT36Nn27LavYPLlWC72BvGQ9RJRMvatiHz37hVC8Eatou1TViD3RH6S8lv4ZvTXiMT3yFAC9fzoYPQYCNL3bF2O98sxoPQTeqDqj9JS7wCK2PMfV5TyQSLq8P/k8PQm4Zr0Zg3s9WtCvvY8vGb2Q2Gq9RDiHvGjuoTxQeYe8WseDvKC4abzVhq08VhpKve6Vfrwn6Su9ipMqvYSwL7tC7i08EpE2PIhMhzzKr8s8dwoCPXXxybxWFJo8CP0/uzC9D7uQj/a8Z/k6vb6ugTzmTcc7kSIgvRECj7yS7bq8MUAaPcdIszwmRL48ICwPvYGPA73t+0I8YwJBvPB6Jb0Mglw8wHndPFumwLu1+Lw8d7I5PJVC3zzPMRC9afGVvccAIT3W76W7fZJPvTi/LL0fFPA8NUZRvbIzKz3SLvs8cLRUPFcmDjugF169I7pRPZjkzjxqPiQ8GZItPSTaczyPJAA9xUxmPY+E2bv1EDY9uwNKPXAMDb1osJE9MVaQPWDwOz2iP4Y8x+yLvQGObrz2U029/mI+PYE3pbxnSN67B3muPOX7eT3zHBA85VAkvO4AEDs7IoO9xFiDvKUloDufpCE8SozRu1lCi7210YW9I9e6PGyFUj17c9Q8br0CPBz4JLzKyxW9ZDnLvc6NKDz4trg8qXYxPVERCTzlyVm940OlPHS9BDwA3Um8hW4RO06Hor3u3/g7qIbPvIxRLDzjSLO9zWLqvOXKYD37GTA9
  7-0: 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
  7-1: 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
  8-0: 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
  8-1: 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
  9-0: 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
  9-1: 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
  10-0: 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
  10-1: 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
  11-0: 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
  11-1: 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
  12-0: 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
  12-1: 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
  13-0: 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
  13-1: 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
  14-0: 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
  14-1: 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
  15-0: RSByPG6ZWrzUo5y9LsWAPJjnaD25xtw8EpQJPYvojD2ovwM8e2O9O8Q/Kb0kPaM83X1pPfoKDj0Mk/C6xwQBvYAS3Dya1oA9NKS8vRjDND3HFBM8ICO4vNmm+ryYrl88ZGsIPazjQDzq9KK8BqYavStSH70aFkK9uY/LO3Lt6LttJpe8VtOHPJqLXbyhIQ68fK23vEHNGT0oEEo8BtlpvYaJ37rWRWO8fSKevGylFD2VnuQ8w6NMPDtLF7xVZoO7AItMvfySJr3sSeg8SKcFO+7ijL3LQHo9+E4DPXzW7box74i82O0bveHDmD2liwC7QMzQOg6wUzvhu1S9k2R4vFXbAr0QvxK8okHLvHaI6bx/Wic9BqYnPNPoo708Zzy9q8OAvbMSy7znSOG8R+jEOqzcgDtWX3A8fqQIvE66m7smqk07hlZqPU2NQjzToBc81lAoPQi20rzNZwk9swwpvYesvztZckg8EGsdPviJabzl3Cw9VaGYPaDMFT0dEYC9K0oNvXADIr32Ifk8KTimPAHvlbwiehK9M3Spu2QCJr1jaUG8RWrzuzo9AT0sG0a9imSivPwhBD1/frI8K4+xPc10Iz3bXjg6oBmGvWGLGL25Ka06+YQivVpv9Ly6/kq9ZW9iOwU1jjvRo388+v+aPVGVHj36EDm86suyPAoHW7zTuwW7hANTvVxcyjxN5xK8H5X5OT/uUr14dYC8+74lvKdDyLv8ZTk8iO/6PLaj/zuGob88TnQzPKeW6r2isaM9gdMJPQiIPL3Exxg6WX3ZPNO+njyCxfM84L2avZLtXLxV3yq9hSoxPLAXET0ElDe8pE+6PeuyuL1SbgI9vxXcO+Hc/bs20QC867icPIooyTzmMgK9bAYWPde5O7z0ETW9f6CCPKURZT1ZEAG97DVhPAdQdjytEna7M+pUvU0TYz0E6sm8bz+PvO1hoTyLxBY8K+U8PUDqKz2KBII81gqWvWGLeD27GVy7LEMHvczkEz3YW5U9CdhlvOKgJzxVRZW9q05dPWnrQz1C2gu9fJ4UvZglYj3GnIQ8DhLBOR9Ry7xMxIi81Ab9vJGEyDu5VpC90w9BvGEJOr3VBFy94f/WvApXsbxMSKk8zZRnvRB6oD02JqS8HQ5NvfpCuTyim2i8cVCCPAfHXTyBw3U9Riw4veJaED2UfA29M1wHvbUJ57x4+QQ87il7OlnvqjzJBGE82bQbu+1wkbx3q4e9/GpAunmaFz0OhCA9j6mAvXVDszzT7tk9s7TSO5XRtjwq40u8a9+svOympzyEUTE9MaYBvOaOqD0+GYS84CwOPVENHj1K3nY9B7DDvGwJjDxmx/68eBeIveBtmjyzHRO9FOIbvWSezjvn2RG8w4sTvWnqXr3dqZM9R2Tpugzaerw7NTi99eaHO27APDzw8029PCkGPXsITjzD5Eq6itgJPVPEQDz79Fu9kkRwvIbeP71NM8I8GP/bvJxkhj1whsA8ZiVLvR5rGD1mD3C9ctSSPG9SDL31w2k9Fn0tveVUiruM80E9NKM3PFo51TwrfWg91fasu9A+Orw4wWa9AoIsPcyT4rzpupM7x/Oiux6C6rzSUZW86W0XPXpkjbyUsp29wQxBPS/gjLz4G547irqmu7meabzszyG8nEIPPMUgCzs7//g7m+pRPKoOsbuINiO9qwEIPZbG771BlQW919tIvBReuLwBXaG9jYibPC/ZBTsvFPq8tIlJPEKlJrzOMlK9+w+HPADbxztdgBI9RhCKPLRHajyhNZG94YwrvGy8Gj28SWY9v0x9O6HeAj0KUGs92dcEPX0RxzzQLXQ9q/OUPV98B70Ii4K9hzsIvdJzSzznVxY7BfcCPA9wtjy8R7w8ox8fPRG0VL0eimQ82qihvA1TNTuPI+g7wYD/vJVE17y6CJO8U8E8vX14vTum5uU7Fs+yPEwhXL2rGBY7A7S7PGqcqD3a2mW9iZ8SvbW+47wtC5M8QdLDPNjbMrw83/A8LlaxvTxOXr3AYOc5E84rPfhSLrxEHOK7SATjPEqBlzzF+HE9nttJvSvrQbydWta8n6qzu7+RoDuVfSe9oe52PHcZmz2g9Ty8022eO0FyzDubnmA9DRjnvIZUYT1/zKw88ogqPI/HMb1anVO93+bAPMAXe7xTZQ29A9CtOq4GOz1MWIM8o4RKvEsdiT00NkG83aGju98c8brsER27ys4IPQHvGzxyOX09XzG4uxfEAjwlXl+8+Q+JvHOLJ72aQRa8taKaO26FJrtVTpy9suqXvL9tDTwQzqW8RayjvIAhgTyMWE09diKmvL7MTz2aO5C8e3pPPddNqLxR05K8uhB3POsxAjyDTiC81HOCPeusKry20hu6UoQJvSYmmT2ehck9mqnWvPYtvrxJnsq8RziCve6RqzxCtPU8gLPpvEJ4Tb2uM4683xKFO6v1k7ykICM8X7UJvTbG5LznVOI8akPHPBSJbz2CBIc7/cA5PPGFGL2+S/M8ecxIPfky5Txns4E8NMoPvItF17tchp28IAYOvZVFujypSzs7nhOAu87HqzywrxC9fVDIO5qlWD2g+FK98XQdPZEt7ju69IO9eo0PvXZr1rt2/mw8LJRnu9e7Nzxdq9a7RfLjOwoyo73HclC9f7YTPEcZEbvriuu8WcbRvBs507uuFZ09wiH/PJszBDyWlv68u4OQPLLYAT0agDQ8fnoJPeaEHz3k8js9wKBxvDKvFL3i7Ym9oo/ovC9mKb2ynzQ92TUMPXeftjwvEv88KJ8IvCaXY72VRbK8X9v7O3qLjLo2HA49+oLgu16N37wDS6E8oLOgvCgJbLwTi2S9diu5PHTWTz1/Hn48VKnmvFprMzxKHZK4n6MmPdN4wj1OWU08XaPeuyeIVLwHVrm8ZMW+PDFhUz1/YVM7K0ftOhLe6Tx8QpG8UWeMPcZ9Fr1Rbwy8hpw2PJHEjzyMpm48UcuwPLAKszws1UQ9Z5OKuyEnv7zjhJi8a6Seu7fvN70InOG8buFLu8YzILzSTZC8JXqWPVN4gr1F6Ae9ijqAvVVpL70N40c8LzuGvFODbbr2rUw89sWxvHSG3DwlVv+6fkEcPbyy2juSfKe8668QPR1KgLyg6g69uAxHPT9a5btfnKq7+QG5PA+10zxkmEE8XoYYvYUqKLwulk88ky8fPdj1LL0kRtS8gIvovJP4VTwFrAA89QLPOxlpJr0r0nA9yxRwvPYMQDttAFe9NhtLPIUyCrwDm8o8z0oFPbdpzLwEdxs9DhsEPHsWYL3o7Kq9CfSxvMUpXryVvQW9xRTmPAJREbs1qdq8lyLlO4gT77zaswi8lzQ6PZ2oH7ymJ5A8MQ+uO1KM3zwPW9a7F/eiPPpjIT2pxa48AU3EvOSWxzsdivW8f+MYvSqRMT0qwo08If8evcN4RT1ZEtm8X1TtPMJQHzxuCQy91d+wPWR4gD2Lcz69aOJPPFVEmT3qbDq9VvguPTThCL1w/2s9EUdvvdA6P72C6vG8iWnlu0MOiTy1gtO614sVvZNWWzwejfc7FZxDvAkvCb0rAao8LLuAvLKVmrwJp8E8xXusO5dvyTx4NAE9f0NZvGkIBT2lhXs95FgLvTudN7yxoNa7+Ob/vJSqhz2QUKa8PXqAvSycqrxty6G7p1GQPc7UgbsBRVo8OEcYPLgtFL1okLW6htMSvGN2J72f7xo8sHr4PCOnZ7yBKi89Na8WO9t6Lzwp8Bm9B6iSvQ143zyNdaA77JgovctV57z/Fmg88cVnvB1v9jxzi3o8JaIPPQbzaj3YlQi9061tu2s/vzwODD+7cZm5PLKu9jzPx9E8Sj2fPe5llrx3v4E82H2ZPCZv4jsab1k92cHdPFlruj0LF7Q8aHx5vYeEDjua4Ae9TXmAPdfP5TsoNTC8NjwrPTJ0jT3XHlm87+7bvCGMVbyG5kM8RXY3OUNVerwxcy+87teyvDA2SL3JtnK99hThOyUlEDyJ7Qw95ST0uxuc8LxoG4c7gomcvc4MZz3z53M8+ToNPZ+xTz1ZQi89+gMzPZSmSbyvIS69DfQHPGFgRr1G5zg9HdhfvP0nATqLjQe9r1xhvauFHT3/WA09
  15-1: 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
  15-2: rDKUPPLQVDxJhYu9fq2IvGxgnzz4g528pGhjPWfQwT1ZNW68mYdaPNJBbTx4FOI8oiU/Pca/wbxQgnY9neUCveN3TT2DVTM9elOFvYnd3DzaSVs9ikEuvZ/Oeb09buE873gSvbuxhr2jHMy7KZjdvDPl67xwVeE6Ts9BO0gXtDoX4x28nZUqPZZ5Tzz/Yrs8blXTvPZEPD20Ewk9iUmCvfTx8Lzkjfu8cTJ3vQxlpT1Y4uk7YaPTPMqBHLlw7DM5kW8dvTDTw7yc5109D2U4u2+4i71X7VY9XjySu2xNt7smwYW947ukveGMpjyhIss8LXK2vHAW07yc7aK8kCXCPMQXGL3VgUU9luiGvH8jYrzfCBm9qsYVvQ6HTb2kldm8lam7vYn4ez1pLz+8N8ofPBRjj7wj/JA6dj0uPOFIE73t64G7Crz7O1OxMT1NotS6njHpOsjvkbz3j+08DkB/vRKrv7o+VsG8jgT/PUtvGLwaDIS6XS0TPUsjDT2QLwS87b+HvR1pw70gblQ87Hm9PJ5MDLxiTwC8l3DHPFe+Ub3RYs887zUuvetgeTyJrD69xiA2vVMeez2PP4g8/BrHPL2x4Two4428m+08vff9Db0VR5c86p/su82VKbsmjRK9OxA3PfCZJj0L0ns9TiaTPaM26DqKs1G73QmcPFq2hTwz26i8lb4SvQcSAT1fhzS9J+WxOyO0pLylr6U8oapavFKIsDstlYE8EOS5PIBxEzzhZXE8IrhBvYuUwr1f9SA9yxYWOuQRWb20o/G8WDurPZgw0TzdFj48JEWFvYPiAzzt7sm7lTWpPFqzrzx9obm7kvlHPcm/Xr3QTjc8m4rzuztfgz0RbQe9Y0viu9WP2zwypQw8CIV5u+BWYbxBR2K9WH9jPBxuszz8qVy8798EPf2Lsjwi60Q87LvWu0t/LD3Chxo8xrVIPDjrWjwSsAu9Jxb2PLV6vTz31608TlhgvW9djz1UuJ88lv17vZ2NST2ygn89ROJMPTO8/LxiS0G9raSePaeeUD2Rbti8dYjRvH9SOj31iAm8JMxrvAkgHr2Y/h89OZCYPHZPVb1deR29v/NCvXu7uDvf9Eq9+/ztvP5YkryOtU48JeaRvIKVFj3wXt68ZCRRvYEScTzWLji8pkYnPWLMaLsFn7U9+midvM5cczy4cJe8I3a3uynw3jyhyV48P65wPX6gpbuCIp27om/KOxwQlLsFx3m95nWrvF1IET2DD309xByvvAD/pzy/9L89QtFxvErqDryZrdg7PgPfPJi2CLy0mhY9R36+PGv+mz11tNM6Zq2IPU4/cDwQqLU8jw2qvLiR9ru3CY69ln1vvTRc8zvtr9+8m2S/vCznjTz36wq8TgkVvbPjIbzDF6c9Md6uvHCJpbwp04m8JGnvvFa/bbzdjtO8WG7mPPdkzDw5xQ+9IbUwPQtpHr0QEbG9Mnl2ulk8dr3eEe67ZzHSu4to5zxZmDy7KB0Yvd2QCzxDyle8j9U+PGSBirwbX4Y9iLUrva2Sf7wiUw09UNn2vG2LQLwS1OY8iIYKvPCizrwvU5+9J9cpPeMv9btG3f8808SVPKT44ryAsh+8RJwfPaXUjrxcFbm9+rFVPfHaTrwQ4G682toZvXcqdL19x2M88vmaPPJOYrwtTcw85QFvvLVGvDuiVeC8UhQCu0Jh1r0tQQO9LgQpvOtAFrz9VDO9E3Nau/X6ELxqZ0q9pmNxu3yqxrxdUxC9PiQiO6O9vzsESdw8+uoKPQNuhTxBbIa9x6Z9vNBlfT00aDk9J+dPO/QFijzqGM08iYRWPfBPpLvcdUo9irpnPRnVmbx7c8K85M6/vdxCfTyf0ri8T0XRvHN8SD2QAQU9xvfpPFMAP700irs7Zo8TvZfccTsoWY67+2BgvE2N0Tn1hTS7LVv/vKjgXj2aItE7BnRwPTDHCr3DFP04t4qsPMKO3Tw2KpG9IddMve8taLzlFUI9d3+1O1zQDD14eRs9hykwvTRpoL3CWxW7PanQPLsvD70uUjo7gYHRPE5L3jwLrkY9oh1WvWkNcT3uqza9ztWGO3uor7zy2bO81x4CvXKRxDwze008aRU+PBPhjDzfTrg804vFOtu1gz28RgG8x4osPeaUiLwwZS698MFmPBIWv7udEci7seVYO4IcGz2jV9g7zuUUu5Ic1zyNOZ28H1mEPA+mUzyGDY48uIKPPE7H+LvA6iI9/yspPCGQ9DsMPoU6R2mfvEdQubw0ma28nCMBO3R4wrvrGYq98k4avS6YNbxL/o88pVVPvMvoJD1+TB89kLSZvO8KRT1T57i87tpxPQBK8bzO+Dy9GLJVPS6nDj3sEYE8v1LDPP6pTbyE2cg6xwLUvOtcZj1STYY9fZh4PAmGPLw52SC9XKh+vEshJLvuMAC8tvM6vA97tL0i91k7L0ICPC8Oqry4wH28lcLSO3VucjxAFfM8AdiCPWSJTbmGTm09XyxQvfmder1ijEg85oq+PGaHQj0MmQA9lOy/vLeeGz2I8ge9fYw9vE6HRj0my5S7dAZgvJKYXDy0mTO8JByYPHH5Tz0/LjK9DcDVPKoCBD2EsAq9vFkxvdLsL73gvog8AhzEvHr+1DsuuVO7efbXvCAcir27ez48LjCLvGNE3TzXmE+8+blyvGGlsbyaVLU98wgBPfl1JLxQRDG9VEoZPOLvxTznUNM7sGoLOn7+JD1wsJU9icMgu7IusbuZ6M27lfxXvIr7mb06ejA9yLHrvKNFnroGNwc8/Ianu+gE0711ZvS8SmgyPLOfKbvkjXq8/T4SvUT7XDqt8yc8NQGqu6w9ADy0uSQ8EUGaPePvs7y/peo8yg6GvA3ZnzqXFAG9rM+vO4550T2gEmI7Hn5cPEB5XzxOdea8gn4DPWRyij1dDSM9TKnUPG4YST2+l6G80apwPR3VwLuVXg+9dVLRvJ8UFTxXX5e84NNSvJ2Hjzw36W07wTtTu4yqFz18ASi8NZKcvARNYr2ES8i6ssR+u+CitTrFmzO8JgEcPUQNBr1dd6C8AjSHvTBDl7wmzYe8+s9cu3Co9jxnd/M5fyecvcSRUDxHkl+8+ykKPcIwaT19L8E7R0sxPeuP3rz7ym+9LcFbPbcKjbxB8Qe83aogPBzs2LtCejq936JCvUf3rLvOrLi8HKGGumQ4Hb1Y22W94t+uvAAiRjwwIUe9mRfnO6d4PL2lMOs8+LrivLoWAr0BiZO9Rqa4PGl9kb2Uu148lsOcPNF3EbtHL508sOaGPO0BXb2d+Ki9ocscvMYrHLwKZhA9yE9DPdxBijt2pNG4fcVWOy/GEr0wEqO4GqcovF75EL2JTfM6sGl/uWS5Gj2mdFc7lg26PCzvpTzQ0jM9m5QevfEKwTzrYBy9lKtZvBVJsj2GM986bbB7vVO9Uz270ZW7j1JBPUGkLbxahGu9p8M7PUGuKT3QWKq8j6LuPNOhMD0o/ku9SWYSPTEXQ70bSYg9miu3vWGAp7xJaUS9Ul5mPLaOzDoe4Y278FOIvB5xAjzLsYA8fuQ+vWkHVb09zu28tSHwvLwg2Lpl16e8/zlRPIpspzu1EoM848NXO+QI0Dx/LJc8qn4evexeOzwJK228Y6o+u2eaND3HS5a7BQYyvXJVDb2Oisi8+qo/PWkQcDwjvKe7sobpvB0MI70Hg4A8QcPjPBnY6LxkxCS7HlpLPXgxFryiNgw93iMAvB2qxDxBa7K886o8vS78KryFU5K7cwYnvdogBL1ADxw9g04AvXwlGD38NP48wFEHPdGG9DxnaTe9S9EPPfFtCj01y8e72DOMPJB0NzyChYE9A5ukPatbkzu5ltc8aIAjPewvGb2oaGM9NFCNPVG9mD3YisQ8143OvMGkFjuA9pK9Kz+OPUZ3LbwvVYY8mpgSPVATlD1pYOu8DtcAvS09gTsPmsC8ubqaOz/Rbrw7ajy8MLjWvMCKZr3aeq69awKjvAHzBj2tqoc8aPvbO+96Dr2eVeG8CpPGvZjnJz3Y4Qw9f8ITPCCyjjznqES7XMrDOWwcSDwJT3y8pSm6OUK6aL2tR8g89Q81vIkaSzwwllq9iLEnvSQ0ST3r9vA8
  16-0: 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
  16-1: AIgePYez3ruqZYi9VTqguS3OSjzialG8H4ZMPRlilTxd1FK8oTEuPIjVBDzNyjQ9fwQ7PTm+9Lxapm89ttNKvQMnqjxjAFM9ZfcDvYfI2zyjl5c9oCAJvX/m3LyGF/08eSlivevUyb00V6A8uRqDPIVd0rxSJsI8TySMO3MG97u1GpO6D8EYPfXk2DyD1Bo9YRrBvDZePz3ObCI9FdgovV5ccb2JvkC9UIxOvAHeGT3F26K8ZWQgPBJbg7wnLww9jaravHmWJr0XnYI92aEHvdvlJb2XBzM90sAqvUFIWrybrV+9ALo2vdkp8zznlFi8SzWQvHlOcbwNdUO92aM8PDTT7LyHMn082/gqvXw59Ls8qGC8CLK6vEzMhL344wc7DCVnvXAhrz2+N6682R5mPCcYnryBbHu8toemPGcfuLyorSa7q0cKvNhARjw9Yg09hwilPG6bEL3LlbK87OxdvQ3KXL2seqw7XfHdPd8PjrzBgrw8/9KnPOh6GD1aRBC8ERWtvc1pDL7lvze7y8JVPPr4Ybwqlh88qpbBu/GGgb0z3R89yDqBvYgesztTAYq80CdbvauSSj2irbg86LyGOyHFED1ix+u7LSM0vG2JEL3XfwY8yN48PNDWgjqGxkq8U93OPM1zKD3HeoI9LLVpPRzAdzzJ8W27Q088vK63xjvhLEO7UmDevP/GnrnLcBO95SoSPDVil7yFFIo85GCyvHAK5jwUaE68srzgPLBRsTtFOaA7bCI8vSr4kr17TIw8gckWvDe7Ir2xoQe8BJswPQmJ4TyZsis8t9ajvZIqRDztO0M8XcWXPG11Aj3w4R+89BsKPSPFBr2SWbo8l54tvNFoYj1BqKW9IQ2EvMQDjDxP1IE8Zmh2vF24HL1gFSS9kUr7O0qgdT0ZfeC7Vp6BO1BgkbzLbM67E2zaPDwFiDw3Il48aTm1PBtHPrtoBwe9ZEuaPbO4nTtUgIE8FbNZvRN3nD2YGUc755qXvcK8ez195VY9eMZlPQAtA70/OHS8oWSYPRAHez0l+Zq9KLsxvFIbljv1QW+87jauvCtXerwL/YQ9050zPICN6ry2bsS5PCKNvZVRpDza3ac6aNYyvVq9Rb3E05e7UtMnvceCZzwkNos7qjdGvZkFzjukdOw7iQ19PUDnNj1CJg491sqJvRp0Jr01o7S83kyBu4xw3TyvqSA9GmwtPa0f77xXlzG893eROhpZdjzJTqS8jTrWPONoHbrU+4c9M0cAvRHwrDyKuRw9IB/9vJIGR7yzNOs7fdh3O6TolTzo3AQ870WbPJYikz05ogI9W5YaPU9wFDzdgZA8FOkevLzSCj2Kmle99IUAvSKSyrtzbKK8X9CnO9mkqD0fWuq815E3PCOQwbu+UDk9WOH9vE7TwLxAOIm8WfJRvQUHL73tuDm8N5ELPbKGrDzJVCy9fYkdPaRyLb3Ss6S9UhQhO/c1jL2v8MW8DRjru8x9wDxdMGu8zsAivXK5Sj2ucvG8M7A0PBNDfjuKqk09NjEovfxw5rwGDcw8WZATvTzgHL3pBk08vXGOO5gSCb0kVI+9h6wPPcFoIDwaI3M9GQsDPeSWAr3LTgq9ADKjPFyqiztTVpO9/pbqPI990zu4VIS8EW/Vu8teB72cRxS895NivJiZTrxNO2+8JbZEvdsaWzxLawy97tZIu6JS4r0z0bS8NisevbmGqbyhiz67Ivb6PBrlAb3DVk69lRDHPCcXvrtFnC69wunYu1lrD72PGVE8YrIHPZ/6pjze15G9YoWGvGZVqDxZ2lM9BWkzva6lkTsSPkQ8iWqLPLHA7jyFHQA90XNTPZ1iIT0iJWG6u1rDvVvstzy+C5C6/zdcvdK79Tzu/Wo8oUWkPHG/EL2RZRW8vEA+vCFbPrySZ8e751Heu29Ayzy8DIK8gJuKvELSDT2foES8aVO5PYEW+Lt325g8GNLCPK57ETyUPJa8qO0pvV6f/LzTig09qUnDunJmDj0HPDg9H54MPCDUU71Qego9zNkgPbXJW7zrPIk8KkiFu7n7QT0XqFI9inp9vAd1mD3o0DC9Cm3MvIaegL2RsYK75aFNvaJJrLuz4AM9JdlPuF/DfT24x0U8WkoZu/qfQD0yWI28VkUQPQdEdjwiwe27GftaPNJW57ye0iO9loTQu/QYFj3DNQY8THE+vDCHtru0JRK8kSkevBD1zjwkvZ86jCcnPHDNYrpJj6A7tdaUOpQsizs1k5+8Unm8O1xID7ycChW9xNw1vN49r7sW/5q9PS01vYRDaToOZMW7TmdqO4BUbD2sXBc9hAOlvSbHlDwniGq8eYUuPYxMrbyuRke9jkduPYVilzwK64M8ZmGzPNudDz3LUj89c+VGvfRECj2l5DE9FzuKPHwmCjwfZYa9RHJOvNd4V70U2Ri9gO2OOr+F4b14ox084aDROzDqTz21Jh+8dhgkPSW1H73vnfU8CWU9PXnDvbwjAgc90f9LvYtNNL1+IYq83Mw/vPh8jTxBaug8yXKevE+FjTwDzwu8ToZuPKhbWT29hpa7J8OGu/qCKb0jzo68i0VhvOYoHD2l9Ri8AWGHPCzP2zw8M+C8BvahvAbqj7vK+Re8OwuzvCs7xDwDPTm906M3vUdDmb2wk2M8r1VmvDuTVT2veRC9KN+ivPgIn7xu65A9R1WTPPu/mDut0ni8fcmCO9fxtzxOOCs8zg48PBelPz2ePhI9rbVNPDTVBb3NBba8mwgivL/n1L10sQs97KpWvTQ/GbxSlui7lcAjuxvRurxw98Y82u75PHcPp7yMRfa8vFtWvXdTNLwvh5I8N+vxvKgbkrzInZw8H+m7PWyQE70q3gM810HsvHQyjzzh5Ae9nbRRPEySrj2VEzk80jgRvA0Xrbw65cm8Br73PARTzD0kV/g83c8/PWHHgT3jnva8MMoEPabIy7wlxCy95IPTO7qJ1LsgEFy8mJklvFqM0Dvh2907cW4kPURkKj3BGt+8pTxSvGC9g72Db7C8TwQoO9f9oDvpcJK7j+piPbXXibvfaTy8LFlevdg5lrw8r2Q8S1X+uyWKPT3msaU8II2vvVJM2rsYIyY8VdQQPIV0pj1wrW88HzYVPbx8hrxFcGa9h4itPMq/vTqFujW8/EULPS0FxTwMliK8I0uKvW96/LyyV9C88E+GvCF2y7xweG690BWwvDTt/jx2Z4C9AN/+PHYCuLxPOhk9a4S/vArWS7x3unS9ku7nOxnhvb0TzkE7g92vuvfN8jukQRo9RTAAPJ3GLL32ssW92mR1POHbhLt+Niw8KfVXPfMBkbwTLJ67uPWSO6YvRb2ANjA9Sa/SvAArS7zsm528r/3fO1HWIT0esE88auATu9yPw7x8uNw8KJpCvREnrzturG69I1+YuxSvcj3ezvq7VqEFvbQEEj2XieE77ukCPeD6Y7xArL69a3eUPV9AMruYQmW7SsR3PXUrRT0diNu8LsKPPVpvKb1lgJU90EeJvWFONLszegy9TeyJPHVMJ7w4WRk71MCovEfJfjyI0Vs8UVC3vK9zM72PQJ690TyrvGt1q7zn/qi6RObnOp9UUTzY2209VgYrPS9Qxjthc5I8KON0vY5WWjqoSwy8LGEOvafnLT3TkFW8+NV1vB9F0zvgXe68vugJPbNOaTyRGoE6ph/Ju1wKNb1Y+Dc9LGzYO8XO/7pmaTi8/VpKPSRQqDvZYT49QSzCvDNb7zu1Dpa87Kr1vHR+ELwTWgW9SmHqvCbkbb1QPjg9nJZdvXZtKz0vGz08CkczPQlwHDxiuYW9Vy9WPbO48zzDgO+5xRZxPQEl7rufICw9pnpIPKvzFj0UYUG6drH0PIcif723g4s9/ygcPa7eAD1d1Ac96DWOvZoKOrwJ6IW9K72SPUCn6TsDJaW8GfXcu1ngDj3d76C8gZ7wvKDAqjvQqi29LKxNvOGZ2jwyck68/lDFu7Krob1SX4S9J9fUuqAqRT2yfYc8T1mtPEouFzpbE7q8HkS9vTtKtDqWfyk8Z7bIPEqKRjzBAti8cv4MPOeMDjzVJtQ8Z+61PAGOUL0qvVG7YNKSuhRw0Dz1RWq9da3cvETWHj0sImw9
  17-0: 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
  17-1: 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
  18-0: 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
  18-1: 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
  19-0: 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
  19-1: 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
  20-0: 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
  21-0: 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
  22-0: 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
  22-1: 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
  22-2: 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
  23-0: 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
  23-1: 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
  23-2: 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
  23-3: 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
  23-4: 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
  24-0: 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
  24-1: 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
  24-2: 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
  24-3: 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
  24-4: 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
  24-5: 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
  25-0: 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
  25-1: 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
  26-0: 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
  26-1: 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
  26-2: XFXcOXyMH7tdhHi9E2ymPG2JOD1wXZ07eUPMPc+PjT2oisu8gNssOrFYwrxAZHY9w1i7PERJ3bzrutc8ALyGvfWHPL3b5rk8sigpvTqT5Ls8Wpu7ctGjvasSFb0QxaE7sIqwvLIFfL0F+H28O7s6vX1kMLvWOW07DuF+PQjNDz3w+zw92viYvB2HEj0oJ449beD5Ox3chD0YGSo9WaAyvfyaKb34lZk8jPNFvdCERj3k0B68IEYDPXMnnbvsjsI8VdTGuxtgFr1zlxo9wUO3PH6Ze71lDzg9Tb9gvasrxzsIbw+9YWZUvKKEGLzL+wE9ySI0vdYbQbxy/RS98hNAvUkc9rodrYu8s66yvKriRb1GUSS8ks4SPdLGOL0SvxA9KwCPvQ4jEr2feSm8qQixOw+4lrwG+Ys9IgzXvBpdHj3Bu+u8Fp8BvBsEiT0MBYM9npzoPK04CD2rTz08FG55vRCQqrxQePE6bk7EPQI1v7yj9h+72VkbPbQ4PD2PkIW9hFcLvSitMr28UgY9QwgbPYgjoL2brVi8HSLvvBXhiL2lDj48+ujMvNsJML06OFe9rqpUvbwtCj2BqEY7b//EOzTu7jxDEAo8wq2evIDMbL2+X9y87UAAPeGiSzsygMG9P45uPWlvszzmjMI8F81EPa2P9TtQ+kk91W+dO9pCnbtTnZO8LgqGvfVTbzxmfpI8t4E2u0B9+rs8fbM7ezGKOYEAcLzp6aK8FYqdvH/YWj35zRU9StwavSCJzb2BxEA9jsbfO6U9Q72xDQC9NhAqPXJoBDyA4Pc8ALWivfwyyjw/mig9qrRCvJwPkr2o6Xi8mFqiub5CxDzVvG09M8M4O/xuIb3S/hi958AAvctniDxt/eG8PrxKvPpnDTxkBFO9GRROPIJX3jt/eno8tAcZPacscrz2K5S9CjpoO/dVrLxVGyK8AfG7PJEhXbxUG5K9Zie+PdDlSLzhX3k8tLmfvV5k4zwBIiC8KoYjvPBYmD1tB2c9ByO1PU/fEzweyzK9iRkoPS+qVzxvmU+9SNUSvIPCxjw19rg8lryDPBb9prwq7h48/+n7PPO34rzhQ3W7tlkfvXFqprw2uLS8B9AivPHGjrzqgpM82PQQvTUvCTwFg+m8ioYCvQ56c7051BM82MGsPM6NQDwClUi8M/W2vHuQ97yYRUA8QecDPFNVrjyGI049efnOvHXXgLyzgnU9aaAgvN9hTL2vbge95RmKPVdy5DxF6jE9ZjKYPFR/vzxls8A8u60ivQQaWL1HF0w9achQvO3yHT3pv8W7jSDKPKPWzj0vzBG8bHIPve1CEz3z6l06Y8eGvQvNLbyef3W8oZSmvBDNsbx60428MLapvTsFLTyMmk28FNtWPABQFb3NtYs9FicEvU54P7wp3Mu8Vg02vc2GPL0OPMS7wsH6O3ntNbvpnCO9LExePTb6/7xQ/c26uSC/u8275LwnPSi8nlRMvGtCOT0gTWg5ceJzvUrtD71oHBE7WYIvPfBSg73fBRY9ML+CvIxuzTwCLBA924kqvXMtlLtM63w97sLLPGjyr7zWq6C9pxX2PEJjSD33fPk8whkDPMhRubyTS2S9aQRKPYOqnz3/squ8sn8fPXRJHj0uXg09HumJvPlEBLxPGhO8+LrSPD/eyrywuOE7C0E0vWs93TqFXlG996+vu5yHjr28rjK9c0xnuxB3jby1mCm8ZO80uyzpq73yMU67UCO+PCAmSr2G1uQ8Le3JvNvbvjsq2Ro8XsxBPJGHAbwl25q9wj+eu1/ZEz0zxpw9pZQ2vf4AgDzAV747QHrNPNGHRLzEbjY9vrB3u3uwkD2sdbW8erl+vc6/hT3243M7VTJ7PdMOpzyH2Pq8M3lIPU26Kb3Zryi9wZ+Eu4Ue3DtIlks9qKFsPG3c27xFyIw7pSitu/1RkTwh4PC82bxIPaFUVrzxFDc9AAo0O0EBUT1Irgq9CHylvO+C+rxb60o9RJKAvfOPhrvBC448+iBXvfXEKb3drJ278KpJvEvr5ryNdLu8QIcIPIuVrbzqJ1o9VFG8vFGWVj0NfhS9MGcGO1UHuLxtg1m82KWKvXUEQz0MkFg9rdXdO1fzLL3ZkJs9hhy6u9JYuz2TXLE862GYu/uNAry5M5e9pw5UPWWgIjsATeQ87JqzPDBRHT1gwsU8pGONOzBbRrxqete7UaojvYB7E7zRJoc8zT7/OWwpnTx6ADE9mqoKPK5L0rt1Gyo93kUMu69ZerxWqT09RJpQvYYk7rzfJKK8siO/O08MEbyPq6S6ahKwvKFe5DyGpsk8DDlOPN+h4DwDDza8DboYuv4sXzxxVem8qsQBvVtYizxf4DS66zaOPNnAND0EdMk8zchkvXlDGD1lTOC6rdxWPRVjdzxA8FK9dr77u20A9byLnEc9yJAWvaX6TL3LJtU7K7KsvI3VgzwAZy89/8V8PcuUizwq14A9TuD6PMadlzwPnYk8RhHJPK57crrO30g9JQnYPPeMgz3oo4Y8gVU7PMCQHD3c0V0944kXvBJwTj3iooY9Cn6GvPUEEb1T3wO8iOU2vTGzNT1kNTG9DgwCPS9vQz1mJAC9cw0Yve4AXTz7DV+9MpMwuz65hzxrWpe8XZAXPVZ5ur1W8d475ZMXvaCbCr2Yg0G7AxoUPTwz2Dye0WI901lGvCBxQTu7Mc+8ASGdvC6LC72CFrA7VikBvSCk0j3+PoY7fVUHPTHm3byCu7O8X7y0uo0sizwkqhi8KF6VOwP/ojyAiwa9v5aHPFubOb3E7wG99CcUPYEsPjv+EBK89yKWPMEdlTwpWtI8aMHvu3zQDzyugBC9jkikPbTJhrw21gc8qxtPO9cAWjwNKj29hlNsPbV5rDyZ74o8CCeHvNrhHD3FJIw8IzisPCihEj2EbDI8zOUqPRFMODz69P+8Ch0PPVWmUL3YAaa8oNJTvU4zvbzIaYi77xFwvSYs7zz5Bh+8ly0SPOPBHT2W2v67tQPDvQi1drv/dtA7CTCAPNOsWTupuv27PdmQPJmsxrsFCEe9otnVO9Kne7x8qZc8clcLvGHN8bt1l948wFjKvKpzRD1XExI8jrH8OlTGCz2qARe92geXPVehLDwhPUy9Bqbju1b7rzwq/2S9I5N2PKWW7Lz631O8opEVPKx6vDucGO285zeXPNj1cby5/0q9LDodPCYEHbs1U5O8UeNPPfIVTr3vpGW82opMvHw807wa0EK9GyyKuyMtbr0PbwM7Ws3WPPdcEjwHtig9XqrVvP9V2bxR6Ia9AtZCOyWZC70uuZU8tGZEPO84ljtimVs9nj0PPJOGQb3u8IC8N94DvG5YUL2Qcso8YntaPH0dhTwAL/u6dg16u/ft0TxBPY09TNCMvKwXNj3rlb66d+DtuyXa1TzeQzc9MO4qvSm3Zz206RM8zY+APVWELjyvKI29UuKTPUUhFrxmYtq8cqoRvHb7Jz00fBi9hFnQPG9pDD07sCk9v0pYvTwrMT1auW+9tVEvOyHdxTtMy0y8AOu9PF1+8Ly6jgY8hxFtOgntNj2YmEW8Wel6uV2MBL2jrsM59/DKvNLIb7skKIk7wzVZPEcvpD0fg4e9+1TFu+6rZruQaj093DRsu2/BLT14ARe95BY8vXMAojxPkI68HpB+PYuCyjxae0k9T809vehhhTwxl5Q8QCtsO9UVg7zlFgm9XSivPDmBzzyiiy89YCx/vA5wKj1g7yi9VVcFvcbMKD1tApC8ZUjJOer6QLzvAO87ExYAvT87mD1WCfo8OzCMO8/LZTxqla27GaQwPaxbYrsg2xA88Is4POqG/DwciHW8xH2/Pe7clTtzUde7RLAgPT4EmzuswOw8z91sPd3lw7xlyek8CA1Nvf0GOrtwXNO87xyzOsMobbxqywG9kqbbuz/FQD0fEV+9oogou4X6xjv2AK681ug4vWKYkbv9lw47yt9LuxSLpL0kgI69H4vNPIk2wTxP5s+8VIy9vC4zAryl3Ra9TjqBvU5t+jx++yc7ZQl3vf0ZAzxnPpk84FUrPKXxCz2O7tY8asJGvW0aJr12oig84Cxxvf4kOz1d2i68gZyIvYkJ1TzhpH09
  26-3: 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
  27-0: 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
  27-1: WFeUO+XL5LyvpjS9tiNLPCMtvz2dA5Y9VcKVPcKITTyygtG8w/uKvDcnXr37VZQ9RJ4EPU08lbsXJIm8VQCvvJ7Bk7yQwxE9n6JyvRJRmrwtLT683Mqrve/tF738lhY8YcWSvHyBlL0Cvdg8tLyPvAaasbwYbAC8SwyPPAgCMT0FoYg9SSlSO6MItz1JUKM8mzrYu2YkFz37UcA84SqUvVkeML3G3F+7s7KDvKoqYjtARO68I9i9PIaOhLzUHFE8MBaAurNMLL1rYCo9kesivPyLar2P1IM9zV4zvQg8IL3M5La8kO4duwE4gjx6BOQ8BRhAvYjLhbyjTT+99IByuw3HbrwyJUW8ztj+vCtL87wRY727/c70PAxPkr3TL+E8rkSZvYEThbxZX5e8Bo1evNmFKr2KF0Q9xOJxvOOy4DwBa5e8xdPUO0bJDj1NwTY8rFdpPbfHJDynnpW8PjI6vbiwNL0tyPY8tBDmPWwWh7xOtYw7UDdGPTFkEz3qiwC9Mp/QvNTdv72uW0I8AWXTPPkQP72bZaa7u5/avAs/aLyZk5u80LgduuEMPrzPWny9YknvvIQEGz1Fn+C8v4RUvITkOT2ETr88+O8kvUy8ijt51oM84tuSPBb6Sby4pjq9eEqLPYMAij2f6qm8C0CmPUEaTT3TJOU8Ek98PObGRD0n2X29JPImvbB7Q7yO4e28+de/vNfF4rxXN9s8p/IEvN7vsDvk4fG8YbBXvfDGJLw7vcc8vlVzvTn3ir1lojY89cabPAY9obxTKCE8tZKePeZJ9rwZhR88ZsQ7vSUoZT1sEBs941r1useyFT0Oxqe8k3TFPIgIgrxj1t08u7tVOzv2q7tXjq+9uTIDvaYkGT1T0QC8ytagvIenF709uVe7EGFPvGuQIbshfgY8bEnmPCpQRbw+Wp68OojlvE/syjyKaX48boy7u8JFOLzvT6m88RCNPW4FGjyS+aY8ohWJvTAEfjxsAHg7uoXuvB42gTy0JoM9B8++PWn32byyT/W8YLM3PIMNYT2S7Mu7FMgrvHilij2gz6k9E48KPTuwmzkL8wC8K+iTO9YIv7ynJ847xiOevCZrx7uOm6K8NQWAOo2MdTwM06Q8sWWSvA5vRz3qcxq9Ohtbvbw7j7uc1PE57yZIPbb9Ljy4mR49+F98vJdC8DzC6eq46KdaPdTpljzDSnM9hcQoPSTIz7yDP0M9w4vxuzqvyLyJNDq8YifHPEqQFj384jw9kNBYvaYLRD3kby49pVABvW7eQb2OYoi86o9Yu2AIfLurlcc8KssHu7Wibj3zyFe4sam9OzgTCr39o+87fBVYvXzUv7zCSJ281KLqvDZi1bw5wa29QVJhvW1qdTxJRLG8OYsavH/xJTxd7Cs9PL2Mu93u47wJsGK9EVFEvdkFIb1GCiO9hfokPWbdwTxbm4o74NTrPAM4ObzZW2u8VkrivH6ErL1sHPY7GiwgvXrLpD3cOaK8ZNhzvVACoryvdGi8OnsaPcUvybyqDR89AQhgvTP4trtIpiY83786vPzVLLzZ4eU8kcvMPH0KvrwU92W9HOKGPXgmIT2eUmg9LDAFvU81brxsUCq9XVYsPaNUkz2WgSW9eBEVPaBVtDyyiwk7tgoBPNxerjucI888xcMNvSp9fDtBRrA87DdJuz0GBr0AFoC9KljqPJ6cyL2kWEo8IRO/O6FeFr1Sqwa9STyIvEfAkL0RPfO7WhfRPGTl5rzq8Ia7+U4AvSUF3ztUZcM8UcgvOkbwZjwT7ke83OLePMFH1TxGYVY9mEDjvPQnILpUZWA9Jl9IPeCNoDwme3w9tfdNPLnyLj3pyNy8/c0rvcrc4TjZ/4M8fDyHPW9PMT1pYq498BYPPSV0cL04kf+6/mS7PDCcurwHCBs9g3/zu68dPb0V6hK9EziFvQfeR7zIBje98t0UPUe81bzMoe261p0hO0Sdpj2qrFO9+89/O5R8irwxHMg8fE8CvTxlpLurqFQ9RjiBvU4oS71hI188m5Bvu3txcrwYX9q7Hp+FPLkxKbplmv08Z6XnPE39fD0SPbq8l5t2vIoeUL1jM4a7MVqFvdykgz0V4DQ9K6i5PJNg4TyqXnQ9QXUVvfGZAD19tR89peq5POHZkzzZLZC9tn2LPLcFsr0xeam78s5bPLzdrDwjY5s8w56HvKq2AjyCrMW8ECEFvbfmaT2Bgvc8HlIZPS/0VD3chpU9K1PoPDyNkjxG/VE8KOUpuyTUr7w1Dq88/y0CvQkvKbwtmSq9YuIUvXIuFby452G8WihrPIYXpDzbeVk9YsFpPJB3OD09mQa9OMbeO8p61zzSOXS8QWb9u/0sDD06Q/G8KRG9PHc5/jxdz8Q4JDK5vHuBtzz2QHY95zcHPFd0qryf5jq9cCojO/syD72QCrQ8fD0uvTh9o72HCoU9MCk9vDcfnztpzTI8T8QvPfFXFzyqhWU9ljQgvLRL6jurnSM9aNo9u92sHr2kiV49e0bOvG+WIj1FGXQ9GIHSPOUQE70jZOQ83+EIve4xIz0mB5A9Ydr9vNbEPLye9N682jSUvKyMcT0rMlm9aab4PBVWhT1aCQy9BRSovO2PgjxYwh+8wvq2vHPzA7yunKW8XJQCPfTct70hTz67+PIYPTnxmjzk/nG8mh0DvLwmJz1jUKo9hoybu3MpljxxhIO9X4+mvN0cUTyDF1k7bBJdOwXaPT1BJ2U9H9J2PckmtbtBlLo8TJq/uwbWBjtC0xA8lrPKvPrPdjvi1N88HjXcPJ1TCL38lSS97IlJPfNDlzyZpaa8Q55YPVUb1roZdUu84JwjvaisHTzjJa28EOC5PYhzQbpvwRY9vf9GPNzntLsE7C69UPckPTZc7jxTUBM9xxvmu5ljQrzV/tQ8K6ZLvD07ortFb5W7YejIOjpB+jzj6Ao9/sx8PaRzsLwUmEq9SSC+vFxP/jrPFhE8tPxyvX9UPz2NMbG8VzDcPID1fDzNrRc8WSwjvTomhbqHSDS9uPn8PAvavrzBemg9BWAyPXQTBr2M+z29gVIRvSgdKDx9Rau8x16SvDlsyjvQPA08H1iNvF8p2zzgfDC8cMtjvQJNID3zXig7L2ljPVOHxbzD+F+8Wzc7vc4hsTzMg6I8S5plu0bOuDwa8rS8Ia4oPXVYj72j6GC956uavB6gLzt8Bxe9s1/hPBU8nzzHx4w5Ck4bPE6hQbxExPc8Tq2qvKJhEr01zXy9Na1EvVtaib2Ipze6HyEFPd/ThTx37YY8ulxuvM1zYrxDFgG9RKPFPPWDA7zajGA9E2ovPCZNgjwt8JQ7OLqTPI64oLyTroW85brFu0oTSL0RjAk9XsT8PD+nvDsHyYe8c4OCvKi217gdtRM9Rp+AvIvXjzwaXIm8AxcuPPVAwLy0wMM8Rah/vW29FD30STm9sKVUPWIMsTx/BDS9NCWNPXRZED2FOp691i2uO9XmgT0M+8S8PSssPbB5LD3/LQY9A2WEvYPXkbzmAG+9l9fsPKfV+zx6HpE6GDm9vJ0POL2gCoU8rCHPPFYJHjzSthS9d2iivZVZYL2Nmg89CQNXu4kOYj2mjh49X4CqurTxmjxZHQa7cb9XuxJEsTpieLi7M+KmvMlsfz0J6oi873zqu5EUvzzsQZi7O7iCPSqeM7zohc88Tw7ougJaSrpv5M070ko+vHwqpL3VORI8GLRlvNNmkjx3/kg9rsGUvMzLWT06H0O958BjvRF9GT2H3zu9vjrsOsZFwrqUah89ODVevUVuHj0wUoU8RpOqPHbpDz3nFQW8/hKAPfi6oLu33SA9nDDvvBR+gTwE5N68qnJ1PYM19DzYhg68OAYoPTP4UzwBXaw8c1cAPQl1UTsWUNU89VobvZsjHL0Bwsm8PmJoPVDuTb1nmcc77wyJvGplxjsCmZy80MB+vUBh7LjdEaS8qp9eu85l5jvJVTm9fgWcvAkDrL15PIe9u9DqPLPQiT36BFI74lJiO+WqEb0djdm89MstvY0fKD18+To64DDBO05ybzvdYMg8Y2O2PJHc2bsYFU68S3cNvWMmQr2rH0A9N5eKvbkCXj3HRSm7S24UvU/TiTzklWM9
  27-2: roPYvC5dkLmkoTq9OQvMufXUhD0ns5Y8xNvFPRqxWD1bPnK48Dt+unDCsDvZRzo9vc8vPUdu8LvgiBE9OS05vb9Hnbzy4Bg9B/ASvd4N7Tp8pJU8PgRuvSkPtbyR7I27p2/Yu4H2+rz7NU+8vsLCu9yDlbwm45O8tu+2PJh9lTxhRTY9sHBYPNPExTwcRY48VtU6vNAdeT3u8w08HwYsvQPjK70wVUW8fotFvVxyNT0JShI8GCIFPS0dELwlhOY8yZmCvRw0dL0d6fY8C5Y8OSpmOr0i5x09vNqCvRlr8byRbgq9qc4UvZjmTjxgGP87COMcvWULy7yzp3K9sYaavfzO4jkLUJK9ccYYvfBo97xkpa88s5UiPfIQWL2DB4S8RlmLvXcFc7wWMsg7Nj+DPFKB+7x7sRU9EVLaO2VNxrwFj/C8x6Yru9efGz0O41I93pnPPAY31Drsi128CetJvfT5O704FgW8+NmXPTpu/ry9CD48dXHwPDe70TwfEui8r/FZvXjK1L1q2vU7CgFJPZkAh73kTqi8bJSTvAJ0+bqzP2486a3Nuu7XU7xRWOO8cEhavdlpCT0V80I8KLRKPQQ8xrsdmMw86OgevbcHIr0RHcu7a2tWPVw7JrxFcK69DLiZPe2KhT1xHkQ9hdqjPTJ+6Dypv9U8ILg7PRs5nzy9dBi9URiIumin7zwcMjA8eKz6Ox2uxryMV8C8NWIYvYWcAz0EyRe9K8QIvcKRED1k8Vk9XDi3vGZM1r3vWFE9XQ8svMwwqb0pJHg8rJI2Paa/ErzW9EQ7+kmovSKBpzwyLaY7jTAIO71JHbywxxW9+gO4PEtjOb08OJI9cmuBvLn0XTtyyuG8WASbvLE4Oj3rYye9I7Vrvfvda7zddzC9qvR/POx9kDwufJo8UvwTPUhcJjw9Nq+8i6ffO2bLljzSFik8RNH4O7wjrby80Qq9Gdm4PQ4kXDvjcdk7jeEYvZgCGT2yT3M83syVuvP3Rj1IvXQ9VROwPUH6mbzm0Bq9PfuYPAnh5zwFaZq9Pnzgu3L+xzxutfw8EbPBPHuhlb3I0jM7Ut/0vF73vLzRd7O8jzUru6/z4rwZ3JC8jra8vAuH17x9ENo8ZimdvSIYFj0f3kK9oeY5vb7+Dr0f4Ks8gEGSPCFphTzyhqg8dCb3vHHb2rySdEE8MAlMPPQk7bn24l09xgvzO1zX4DsKYMM8yg1lvN5wHLyitt+8Pvk+PflkhD0mfhk9bQYDvcONWDyG+yc9II5DvWk68LvmU508LkUevb3CvzwEQMw8ldwnPX91pT2dQMS7GGp3vZfPCTyWr3A8UHKRvVfzs7yqekG9uRgEvaMGHDz+r/i8VN2TvSAWAzxBySm9USgSPVIifrnxxoQ9HpCwvBANAL3k9/u8C8fFvDtZJL2HpRS9Mt+rPEsqyzwij2C8TwqlPLHQGr1m0Lq8sQlvvMxTt73BExe87Lq7vH/AQT0ix4e87mQNvdxr0Txlfaa8iAzoOzM/Sb2oyEc9ShdOvEVybTyb6Uc9cPP5vPsLFb3dE2k97oeqPHH7Or3vhuy9SWqdPHewcz0Buy89bs8CvB84vLyF6z69Z1ldPcZx0jwNa606U5BNPY5HUDybBwc9PMH3vKwNXLywU0W8YdYvPV99TDwrzok8O/TYvI5LFLwfFlC9YlukOlwV4r22PlC8GCIOvdxK4LwnCS69DD5FPPskHL3a2ie8p5pAPYKuOr2BMbs8Vy86O4/xwzz6ENw8h+TEPMjp/zzANaS9YU2BvMLINz2uP7A90gQfvUS0KTwYyN88eK4NPeXWVjxfNxk94vdqPIMrUz0n3TK7OWfqvJlo4zySqmo80EJVPVNfvbtE9to7nXOEPFI/FL0s0Tq7fHDiPDNU37yt+to8CTOlu4NDoLwlVug8WyRWvR0cTDzJDpS6L0VSPSWlADwiVjE94GJKO0iCgj094mO9AaJ4vABqBb3asBY9840AvUc3tDwOyJA46t3VvKFAob1DEZG8PDDzPHL7+rzFaP88vq2iPHUNvzly2YY9nKwIvbEk/zzt3we9f9IHvV3zaL2/V8c7TI5AvdNDWD2hsUE9cWKvPFfm6ruJiC49YGTnO0QLpT3mPAM9D9jxPCOMSDw6KJq92uJuPUZ6wLyLMjE6OaU6PB6HLD1/wWU94QCduuY607tClR69PSbGvGGxTz1JJDo9/EEFPW8GjzxEjTA9N4GCPMu68zxdMMM8TYnhu9XUhL1A6A08bI7rvDRuC7yVhvu8WoepvASDrDwCosu8uqOAPCTcKj1Fm289BG76uujZvDzzTTW9hUoCPbv6BDzbQEC90iY3vBnsAT1ECkC9/FxZPWQTJD345qY8OW8rvdazKz2ncE49X5WfPI7i47v9xGS9beGvu8CO77wKqHu7i9m5vNsgq72zwMQ8FBeWvEd/ybtXjY+8EehlPdNSxbyEiVk9LcvBPG+o5rqOWyU9sxPcO0kucL29mv88G+QkvEC8Iz0usC09TemvPE+ZfjzQCCc9QemUvDUggz0ePUQ92rGfvLkryrwrvdy85g3BvLe+qj3raAW9Mog7PZHffD36s4C8xX/nvHQb5Dy83tm8ow0FO7J3+DvONKQ7ZVWHPC6mt73wKCg7r2lHvTKORbt1zqq8QloZu96EEz3Q9lA9gPi3vFKX3zvR/im9OH06vV4sYbwLRAQ92N+Ouvs+lD1bj6A8W+lLPdw427xFmqW81OVhu1NoBzyDmdM7I7BWO21lsLw2jX88SlE5O8pzPL3K+0i9RA2cPPtUozyjiJS8MQwqPaR7o7mWng29WHTtvINMajxECI28rJalPfnpMrzRs/s8+Qzuu5VdpLpOdja9+P/5PBJgLD13XJA8P7TIvPUlrDz0y/s8mTw5OyFNGzz07Mu8qrnHPAWWuzzaVbK8HuPlPAHep7yCvxe9AcHZvEBbGD2wTkA8IWgzvS0cGDwJqwQ8CE+ePHl67jxVgPI7lN8VvdPtqrs2ewm8O0kfPcZHKzrnQjo8IFx2PGN1urxkYiK9Na/Uu/mrrLzB/cu8jE3Mu+BXgDmwpnM6BLVKvVCqHz1c3Tc8jEUevTkC3jxIklG8SkhAPYNr0Lwx/4G9U7CUvMHjrjyTCyy9YDsCvFGO+7xuBJS8WQF8O/0LhLuBJ8a8fysYPdIr5jf4LZG9aMCGPJrrnbzi0Hu7cQM+OvAufr0PSpY8hZIKvENQ/bwDqTq9jGWeu2K0IL0ouii7WdIVPeSOErwBnTA85SXJOnxFmrzUR9i9o8oOPYQRirwrDTE97TAHPVLa9jzyvtc82xu2O7QVGr3ysom8+sglvBEqa73g2+w8CQPQPGm/HD0Js8+8pjeXu/oQZbxwe0U90YOvOykTHD2m9YQ7spJNvEHkGzwlKQc9Q8m6vfQkcT3urJo8wI95PT+ryjukyC294TNXPd9xYTzJBMG8WFYUOmuOtj3Y2YS9D34sPbdczzwJrCw9CFxUve7vCTzWsmy9qy0yPENgATpzuZW8lXuau+L+IbyIOCu4pG/fO1Kgl7zwM8y81WUCvcjwYr0F+r48IAzSuzxHLTxIPW49w6tcPK75Rz0a09u84ORfvR/pjLzuy/S7A5QNun1tpT0g6zS9bOWZvDBOYryj8Bi9pCoRPdgN2TyOF0s9SWh+vOw2eLz+Bo05GpEnvPwyiLy+CwC95QeyPJZfIT2vqkw9WgMDvWYVGzvKquK80jgkvTkPCj2ZWtS8l77FvJiOfby7dAk96wXWvBJymD3iPgU8+mlRvENzTjymeXu8Z8w8PRFcYrwRBRw9yoeFPAQIdDsgCgq9X3W3PWwZCTooz5o8VV5bPa2gZ7lyMug8ro2+PMo0QjzXtJY8X2xQvZsbEr3RoOO8UPqEOl9Io7slemQ6+On0uzyeRD2mnI69iFZVvVQZNDw/MBi8rEj+vJL0pDtQhIi8m9dVvDIBor1w6qe9huBKPds1VDxqq/U7s1kHPGo7dbyp1e688wGKva6WLT1MZM279p0XvTRBAj1B1tY7aoDSPAcz4zx/sTe8FTUYvVVCi70heX48S9ABvdvnID2sb0K9v+OGveR/iDuvf4I9
  27-3: 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
  28-0: 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
  28-1: 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
  28-2: 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
  28-3: 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
  28-4: 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
  28-5: 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
  28-6: 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
  29-0: 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
  29-1: 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
  29-2: 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
  29-3: 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
  29-4: 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
  29-5: 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
  30-0: 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
  31-0: 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
  31-1: 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
  31-2: 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
  32-0: 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
  32-1: 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
  32-2: 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
  32-3: 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
  33-0: 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
  33-1: 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
  33-2: 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
  33-3: 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
  33-4: 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
  33-5: +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
  34-0: 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
  34-1: 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
  34-2: 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
  34-3: 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
  34-4: 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
  34-5: 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
  34-6: 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
  34-7: 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
  34-8: w8BSu0CpRTx2cua9hrHBOoQrMT3hIds8g1BzPfTr0Ds0/xK8MUhovFD5mL1bT7s9wk2aPetS/bxeMoM8QdkMva/z7TtX9B49CJ6/vd84eD2Da1A55kZ4un7E0rzcb5g8B4dyuzND771KlP47O1N3PO2Tu7yT3aO84p13PZe2yzwOjoU9P6OTvBONrj3fphY9gGSVvdNVyTxS9Vk9ExZjPMeMFb3aTru8LHEyPHB9ITw5EI07t14HPXIi1bxNplO86keuu0phkrxQSdi7PLOWvAhmmzuhTaG8r8hCvUpApby2LF+9l+p+PHrLBrv0J8s8DjejvHjnFDzl5xq9vxOJveV7j7yUKF+8mYyUvJBXWTzocr+8CBibO6681DvSelU9Ea+pvY/ttLz00JQ8EUO4PPDCFb3Lip074hF3vFCbDT3A+hK9x4ceu/IaILyV4I28qNK1PAwLJrxWaAA7YqQyvaw7W7z8haa8yi3MPc9AaryXb4o8KWa0PFLvVjtMhEY8SKvHvcB3S73XsGw9+hcPPYi7vrzsVG88NMwOvUeKmL0dSJ88mOFmPMB1w7ze59+8DToiveq+mzznrgM8FCOCOzOJHz23ORU7Ti4bvA/YKj0urvM8iRFXPLdp8rwALqS8ghcjPVQoxzxh11480YGvPev/yT0iNi49GVA4PG2gpry1aqS9/y3oul1Mg7wbXB08/9MHPLV6JTzUx2c9YkqQvTSUzDw5AMC8C2DaPJbuD7zCrMA8UXhTvVuWiL0dzxg9UFycO2n+L70LJuI8jK6ZPSbl2zzQJWM9UD00vYW1kjz41pA8vX4avV5fKj18b229A1T+PCoxz724yFQ9b5Teu3y1Jr3TzaK9nU8yPfkzLz1q4oW6sIw5vOc5Jbwtf8+8XwwaPU+LWLnWhaC6kwexu5DPjb3dT2G9kWcnvI/3Bb1lPaQ7KNIMO/IQyLue67A5BQu6PSZU6jz3kLC4rzImvbkRoD12rDs9Ytpxvf47Oj0Q33s9BIWVPSX/wDviNcO8eTXWvIS5qzwDmTm9m10Mu6j8pjz4Ow+95KtGPJxqMTx0VzC6xbeivNjSkLz0YLC9vgG7vON7mL3S/Ru9swoVvUwQfLwlVxs9kv+3PM0qQz042jk8JSFNvaKLq7yIP2G8OpyJPEah2TzPMPc80uoLvSHh/Ds9BWs7Kfn2uopCgD2UR7Y89L5/uxCfgruPv0i8Oqx5vdr877ptUfG7FpMgPf9wbrpj1Aw85NwovW7aHD2F4XU9igZ1vX3eN72wtVs9U+srvO+GbT18oGa8kb4xvSMQETyQlOk75pmiumlSdD1CpyA8JaIZvUm9kDyGSZW8ma97PaBX7TwtfPG8Hx42PDw5Dz3daYU86aV2u2FKwzpKbWI9SLhPvacKxbyoQ6e81JnwvIinAb1DY568TlbPPG/5BD0YRe06+LZDu4r/+7zNiyi9KMSpO7ydBbyJ8vI84HI+uiNbHz2qrqi8mb8pvJj3FD19z2q9s7NePTn0K7zK+YQ9igC5vSxfhjvyxA279hP9u5vUjTwM7GU9DfhEPXQWWr1TM0C7fMQrPBtRID1S1xA9o16BvK0qijxOE0a9S5yePWTLVj00HQ28QckYPel/mDzUwuQ8W77wvFJ5lb2mS288hc7qu7+V7TmBqh69S6dJvXQXlbwy3UW9Axa4vLaj+b19/PW8lJpBvWAqC70oHhY9fJ5KvJiWRb1ZuZK8VSLcOrdAlztjl6A8Kc3FPEgXmLsUD5U81RnfPCDU9bs6dgk8wlY7PSOphTySc6M97eqbvN2K8DxB+c88RYsgPYV2Dzy4EHc8UQlUPSKtNz1Qiti85yShva9SnDss6VM94M2du9epHz2vAYA7j9fIOjN32bxQnnY7negHuqjLPz3xLYM8obwvu9jUpTyhQt65R4xtPL7V47wryu08bVZZPVmy57vRu5i7ZxgjPZ1b7Tyu2Nm7Zl5fvOBTYL0bxYk8HXmRu3OUtDxe2EQ9lHXcvD4hD70oDZA7nNoBvK68J729B5671gMWvYgk6Dxjp6I8ARITvTUljT1FNjC95ueiPAA0orxW/I48zYJevaZUWz1NedU9dhO5PDa5Q7xsEDo9QdymPIfpqz3//7Q8KAczPbOosrwVPXK97uhxPWxbnbxsPZm7CCa/POQqnD3U2SK92PyRvNmu67t4jFQ9Ik6SPAZLSL3PLqw8WkIAvPKxMz3lIEW7DZssPN89lTuDkGs8ggOfPC2ON7s7WBU964sAva4ImbsOOhG96AVVPR2+ZrvGUkE8nKsCPcq4kjzulhQ9O3sCvRGnozv/bbc6IliiPMv0KD1GNs68HiG9PCUtKT3bLOg5MHm/PFm4ST0t9VY8Z2knu3iGmz1Jm5c8gKhnveYYDj3uVSW9hMkfvYgzobxbboo8MJcHvZKf5b3R/2A7B2OwvKuabrsFD0Y8ekYPvJ6FFj22mqs7wbfNPFenYDxjHRw9rMg7uhsh27y2tZI8WWb2OhVJlTx9jgI98yWDuuE9Ib1vuoO62lT4uSSjIT2NDUQ8QfECvIWc9DyCYQC7gPUPO9mcYz2p3k28vG31PIg1Gzy8R0O9tMU7vWU7Qb2oQHC9DXmbvafhxzzvSiq8u3yuvOJLVL3iJco86bjuuqwFOj31y60852PkPJzu2zxM4CU9eD5uvOjqBj1hEm28U8T6u1WcV73wWQq78Gs7PXsQ5j0G5gw9FvwcPdLzTrvDsl29jkJ3vdZ9RjqdSkI9Shfbu2/FnLycopO8TbhvvPB4Fb343bG8bXa2PINh9rxk7z48pk48O/wVEb2ix2y6e4wnPUjCoLtUJxO93lhsPHwyeL01kJc8Rt4pPDqdY7zYH9m8T8Q4PdkNATzMdbg8C+0+PRDjFrtE8yo9QJqQPAokdj1FdJy6PrNRvB8qej1Tf0U8iaBfvBWoQLy2dwK9xM1cvLuC3Lwo2pe7E9FHvSCuhbxYZzA8o5A7PdHQzrvX15I8LMWHuwp7ZLzJNIQ8NFRWPW9pCb3r3ks8JBy9ParpK7z5P2q89ilevdnphrwBA5g9cPqjPHa8xrsTpKq8iMxLPE1e/Dz452C7YF+0PHOCDL3k26e7BKeAPQZdFT0RpLc7vjPoPEFC0byAAgS99NxGvCcCUj2Uck08Q1sOvGpAybxHioG9GAr4Oz3puruakta87RR9u3lcJD2gXZY82jWsPAMQDz03dZs9BDfVu5LNvbzJhCe945+/O+oLSLxuDwo906H+PNfRTbuHD149Z9h4vYZ4uTy9Ssy9CBGWPBqZA72Rehs8vcC4PCRyCz1T86a8QCNePZG1LL39uxM6+dY5vcJxpztuipE8gcIFPZyCkD2TNoI96KbSPFETyTxvRSC7Bk5KvC6XQzzOZ4a9jKIIvRnauzmtiDk84DPEO0Wk07r7Vr86cvYwPVrdRDzTpEK9U0xoPVu7urwXHVi8Lr6aPCvjLz3e19+7U7rWPKbTyLzPc3g9kgnju1ECN7tfwDK9Je0gvZT1Cj1leGK7fe1NvSHm0jowRUq9kgUwPe+uNbyGoju8UwQxu2HzL7xEbt08pGvSPEEwF73LdCU9or1PPHycIzwMZ1W8YdIEvYe64rx+9XE85ezFvIIpIDw+94O8DNPXvOsOXj2QmSc8AFJJPJV3Ab2jhN075K72PBDxyLz4UjC9vc48vZyZSr3H9a+97PcFPcpsPbyFk8k8G9VDvdhKZj2aqcC8f3AjvWp24zy0LCg7V1GMvA6QjbwpmHy8so+puy0Wy7s5Fkg7IAhIPYjVojwZAxC9ZHM8vcXxgD22/UM85RtbPHeiszwimUU8FEGQvCkpZD39y2K8CrQAPSoLOrxmMbk86OFHPVxnSz1pWgM8oSJ5vQequLxdugm9v9XqPJqo2rwgP8c8KbklvfXjvjxZbOu8hcZyvCR5zjtkABm7OK8zvermFTyi+y69WuC7vIf9cbyNjJe8Mo5UPDLzC7owwDw8ciE1veb8/Ttt2l67+CqEvRXnLjwYrXi7ByASPbLyLT1J+qK8XeyMPJMolDw6XHq8ThekPBQgsb1bpVI9OM8evVBOejxs8ca8iKdTvcZdLj2jr/M8
  34-9: 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
  34-10: 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
  35-0: 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
  36-0: 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
  36-1: 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
  36-2: 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
  36-3: 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
  37-0: 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
  37-1: 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
  37-2: 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
  37-3: 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
  38-0: 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
  38-1: 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
  39-0: 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
  39-1: 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
  39-2: P/OPPEay3DwKboW9wwSePBB/nj27Txc9c7RKPbkkY7yHxYS8ieN7vMdY/rwH0tI9aZtxPfTNwzujP+A7f/ZQuzMz+jqSkrw8+IvEvcnIRz1TTpK8dliXu6frnL0ElTg9tJYlvcRLZ70f+to8tOH7PE1czjlKb/a8dVj/Oyssez0TOXA9ovlwPA8qhD1Ch8Y82N8HvU7VWLyndt88dCg6vQV4Qb22a5i8iKW8vGTbETzxOUQ8GJ6oPGoiUbw/PQs9gWstPSEcJ71uUpA6KPcZvAgdVruUDhs9LN6Hu/VZtLzoKc28llcjPL+U7DyghAU9jhQIvepKxLw6e4W9iHZGvcOGgLtrw7M7NnJdvcHhIz3Vsz28BVrwPJ2fWbyF5I89/p5RvdFXF72dgrm8Vc8rPLb+GL2GU9Q8WOL7PNHolzzB81C8qBSsPDa1qbxBjQ49jHG2vMR0jzxoMxE9Vs32vEUgLr1ssLC7V7KwPTxkET3GmyC9sn72uqEKcj2HBhM9M4bNvY0027wAiZw9lkaAPVr9YLzVrqU8Z5j1vF05QL3+gqk8e+B/PF2caL0GsYS8ECZEvbhQjz07cxg9Dgppu6hdQz2cxji87ZkzvSgAmzvpVtQ6rdWIvFOXAL1zSgS66g42PcDCWjyxpo68vgruPbfQkT15EwA9QyoxPJCfyrvnuYW9+ItRvUIKCj3vFPA8UZexvI0MkrzfeKE9H78+vXbasjzeXg4824Z1PVSd2Tvuh0c8nBskvfnNB72KZUM85QaaPFEcb71fBSO8XutrPXKVvzyGMO48MnsavZKgQjyFEhY97msrPYjpnjxDSpa8GrSVPPTjOL1chK09CR3oO+JKzLwSUEe9jGr+POc+1Dy2Ge683pC8u1fXj70JErQ8LtzjPMDaIr2rZz+8XomWPPFPWLzQ3pa7ioCkvK17PryIE4Y7Uk+FvMyNQDv4aVQ862UcPd5siD1hnBg8g1SeveXGdz2m6zc9Imp/vfvlVj2KPRc96ArSPf9mUDzpLjI8V8l4u25grDsa3Ei91SpcPHCAkj2t/Sa8XMsuPCsbtjw1yGI8e4J+vFJmJ737IQK9OugYvdqF/bxlS5u8COODvceEiT1eGhA8/kehO6sMo7rSTG08eTA3vDGCBb35+WI8H8Q2PQqv5DwfVG49TvF9vOwHCLx+nbE8sl4APbrqUz01zQ89guHSPIhRhb36/ws8/c5VvWZsP7wGzMu7w+0OPWQglju5DlU9NDbyPE/1kz2m2II9NGLCvcmrDjzHmzg9h92nPJMkMT1LNhq89pnhu6NxsTxwRZO8VXQ1PNSezjvclGk93wd7vYZJkzykzje8buVEOxwBzru6SWW95um3O5G11TyzLRC9K3JWPFF1EjyqIrM9bYlzPEyIrLxmfnA9vA0Wva94T72FU5w76qXsO5d2yzzgcNa8GYPlPDUGwbtLxC69dWEuvSdnVrlo1NG6VvxkvZQ5kj3UJwW8zMD+vJIIRrtBtVm8jRlxPd5/Tr2ZHNI8WB9NvQI4szxmMQQ9V3aVvNlpZT0gT78810R8PNhmLL2F2hW9EcCAO32Q4jzaETU9Tu3PPNkW2rwQgxO9Fgl6PXdEKz2fbMI8Klt2PB6sijygHRE9QSofvddCVr0iiTo6ONZOvEVhJbzOi5u8oewXvUdVO71pMI28pLufvft1Fr6qgyW9qmZ4vFb86rzmON47GiMxPEFj/LzJA6K8nk9EvDWazTxYYwa8xt5muxzqfLygUUg9MI4+PceWebxb88e8CF+qvLpxQD0H9pY9EDZuvEKYyzyMOrM8B3wXPQ63bjwRGgQ8VjXQPRDSujz2C7q84vuhveW/D7zNJOI8eklkusceTj3uelY9tnKquy8lF73gweo8EIx+O5jwmLwA8OY8JinKvJHPjT0U2Z67sT8pPHixRDz0T868mjVSPUKFyTzzbrU8oMFnPH4Dnjw8DgQ82w4Cvb0BJ7z5bXA7GCqlvLKQkDsYmmI7tNYnvfeXa73VKRE9TprRuxSEururll+8LhM6vcq7Tb0NKB09DBPWvLO5pT3tpVG97MhPuyWHZjpUEji6iP5UvasRXj3gX5A9YPQNPa9nEr3h+IY8+z72vIMurj28y1Y9aPVbutLmar23R0K9tNSNPECUcLwcXHu88hylOoVZNz2nKuy7ozkmu+RANL0K0Mo8p4KevBHfUrtlhgM9zowgvMxPbTwvd4W8eYvSPHQA7zs/xfk6y78DvAd9Gb1gCEY9c97uPD3czzz8awe90V4tO2Z3KT0OXMc7L6JFPVou8jz4yKM8tSWTu9zGJbuIlBe83sRWPWIv/js0law7MpuAuWKmLT0Z/9484hCWO/vwYz3XcD07Jnh1vFfemDzfGu08lTFLvaYx3jv3g4q841GcvGJe9rulYHC8yeGUvY+Qtb2X9OM6QUJkvL0NKD3CYp+7P2S4uwhlqzwZXaw8fio8PBvqjbzPWYs9TIGGvRNxFr18Hzo7fyCrvFz/8Lu6Sww6t2eSPLP12DawVzk8jigXPRMUILzJmio9mK47vfIyazw5ZKK8sl0mvd1gLz3sZKm7hmBQO87xwTxbzmm8pzdRvS7nVLzJDgO9wod8vWBlVzwMaeC8MxaEvGAVy7q3lpS8Vqm+vGh9MT2wGgQ9JV58PW9ayjxlwf88QOMBPSdmB72tvPw8R3qNvJ1+uryAxke8fMysvO2k2D0XEgM8qDvlO47Anzukg0G9UlFEvd1qg72lcUc982AJvbRULD2KFAs8KhfoPMdNpb0gJIE7G14sPLrQPbyeeua8JUyMPDTow7wzcr+8QfonPB9AvjulaZg8blNbPXwsN7wFuxQ94y0VPAR58TzVkna8j4fOvG3Cdrxwn448GAANvHLdsTxU9bw8UjKjPAeg0DzYLXe8s3JDuvXgej1M8k072nSIPDa8FT1rGCe9CgjavAq6nDsJ2XS9vzQ3vL7kJb1k3Z68RvSSPfiuKjyxZnU9zp8/ve35W72eOgu9CZhyPLKmrjwumGo8VHsqPSg7GL0hkrW8KKdJvW1Px7oBmx496CjPu9etijtzyqA8UQaMPHAlrruzTpO8e00FPTLxjzoNyea8aNS9PXbVED1bOa+8Ev1lO9wm/LxeQN68wVILPScwUz3jr1C88vMtvVaN17xt/pm9MSm/PGCBlrw3PUO8BfUCPYK3Fj3SxGu88sMDPAR35bwdFEE9HEABvIBUz7zBrR29WeS8O1mUj71y2AE9+h4KPaYjAD3UfJY8zvNKvLX8sTtm12y9VUsJPfMQSb2uD4M8L0rVPFkgjz0PEw48uWCcvCIjL70lQY88t9tqvfnFbTwBfFc9/4WWPQw6fj1E7tQ8oo5ZvN2y6TwYeWG8ysZPvQfLIDxVsoO98c+cvBUxzzziPvs8ia6evCr9DbxDQoq7wajpO24n4jwyxDq9oJfXPEPg4bwOrlq7UwMAvNo/hj2rHPU7J3QkPYN5Rr3C2CI80kcIvVZaCL0tDce9GfvtO9eZXzx/ZJG8SrTRvBjWfL0ynyO94cduPQeXar3A66K8oMybvLoYrTyo05w72gukvOupj7zag/U8RGvLOgnyzjyiLgM9o+2mvGoZ5bw87rM8s9AgPNfyBD3vQPu71WgMvVeSMz0YqUQ9E59jPT17W7tBmZY9nCtbPOPwiTzYnHs7m7ubPDZBzLwhxjq9Ei4ZPfy9MbvI0EQ9SRQCPVv2gT1eI2+9wi2kuwpdBD0E+EU7Jgw9O7UdPLw+fEo9KM6vPCdCzzu8XHs8LgxOvOduHbzVKXu8kTlAPFtR8zzE75M8DwmQO0XvxrzwcL08v+1VvJp9jzsOstK8RDQGPTuFn73k+Yo96RPIPP4fUT0NjZI8SB5WvbCAgL1XcjW90/ULPc3bljuGL1m8cGb0vNco4zxzopi8QdI6PeYsazz4GLC8r9gsvXeZwbwbsoa8ewNRvI7MirwNYB684gQvPEA4RDw/yDi6B5oLvBZ6Ar3BAXu83o1tvaMRMz2Acbs8SxeAu/5jIrs+wzm8TTfAOzcVrTz+qpq820mCPc13Qr3P5Pk8HI8zvUwopbqlM/C777+DvezzwzzEWbw7
  39-3: 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
  39-4: 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
  39-5: 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
  39-6: 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
  39-7: 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
  39-8: 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
  39-9: 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
  39-10: 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
  39-11: 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
  39-12: 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
  39-13: 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
  39-14: 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
  40-0: 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
  41-0: 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
  41-1: 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
