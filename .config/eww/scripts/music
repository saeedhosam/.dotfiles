#!/usr/bin/env bash

# Define the cache directory for album art
ART_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/spotify_art"
mkdir -p "$ART_CACHE_DIR" # Ensure the directory exists

case "$1" in
--title-author)
    FORMAT="{{ title }} Â· {{ artist }}"
    ;;
--album)
    FORMAT="{{ album }}"
    ;;
--art)
    FORMAT="{{ mpris:artUrl }}"
    ;;
esac

playerctl -p spotify metadata --format "$FORMAT" --follow |
    while read -r line; do
        case "$1" in
        --title-author)
            echo "$line"
            ;;
        --album)
            echo "$line"
            ;;
        --art)
            ART_URL="$line"
            LOCAL_IMAGE_PATH="assets/default_art.png" # Fallback image path (ensure this file exists)

            if [[ -n "$ART_URL" && "$ART_URL" != "file:///" ]]; then
                # Generate a unique filename using MD5 hash of the URL
                FILENAME=$(echo -n "$ART_URL" | md5sum | awk '{print $1}')
                CACHED_FILE="$ART_CACHE_DIR/$FILENAME.png" # Assuming common image format like PNG

                # Download only if the file doesn't exist locally
                if [[ ! -f "$CACHED_FILE" ]]; then
                    curl -sS -L "$ART_URL" -o "$CACHED_FILE" # Silent, show errors, follow redirects, output to file
                    if [[ $? -eq 0 && -f "$CACHED_FILE" ]]; then
                        LOCAL_IMAGE_PATH="$CACHED_FILE"
                    else
                        rm -f "$CACHED_FILE" # Clean up partial downloads if curl failed
                    fi
                else
                    LOCAL_IMAGE_PATH="$CACHED_FILE" # Use cached file
                fi
            fi
            
            echo "(image :path \"$LOCAL_IMAGE_PATH\" :image-height 23 :image-width 23)"
            ;;
        esac
    done
